/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
  #[inline]
  pub const fn new() -> Self {
    __BindgenUnionField(::std::marker::PhantomData)
  }
  #[inline]
  pub unsafe fn as_ref(&self) -> &T {
    ::std::mem::transmute(self)
  }
  #[inline]
  pub unsafe fn as_mut(&mut self) -> &mut T {
    ::std::mem::transmute(self)
  }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
  #[inline]
  fn default() -> Self {
    Self::new()
  }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
  #[inline]
  fn clone(&self) -> Self {
    Self::new()
  }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
  fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
    fmt.write_str("__BindgenUnionField")
  }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
  fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
  fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
    true
  }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub mod MirWindowType {
  pub type Type = u32;
  #[doc = "< AKA \"regular\""]
  pub const mir_window_type_normal: Type = 0;
  #[doc = "< AKA \"floating\""]
  pub const mir_window_type_utility: Type = 1;
  pub const mir_window_type_dialog: Type = 2;
  pub const mir_window_type_gloss: Type = 3;
  pub const mir_window_type_freestyle: Type = 4;
  pub const mir_window_type_menu: Type = 5;
  #[doc = "< AKA \"OSK\" or handwriting etc."]
  pub const mir_window_type_inputmethod: Type = 6;
  #[doc = "< AKA \"toolbox\"/\"toolbar\""]
  pub const mir_window_type_satellite: Type = 7;
  #[doc = "< AKA \"tooltip\""]
  pub const mir_window_type_tip: Type = 8;
  pub const mir_window_type_decoration: Type = 9;
  pub const mir_window_types: Type = 10;
}
pub mod MirWindowState {
  pub type Type = u32;
  pub const mir_window_state_unknown: Type = 0;
  pub const mir_window_state_restored: Type = 1;
  pub const mir_window_state_minimized: Type = 2;
  pub const mir_window_state_maximized: Type = 3;
  pub const mir_window_state_vertmaximized: Type = 4;
  pub const mir_window_state_fullscreen: Type = 5;
  pub const mir_window_state_horizmaximized: Type = 6;
  pub const mir_window_state_hidden: Type = 7;
  #[doc = "< Used for panels, notifications and other windows attached to output edges"]
  pub const mir_window_state_attached: Type = 8;
  pub const mir_window_states: Type = 9;
}
pub mod MirOrientationMode {
  pub type Type = u32;
  pub const mir_orientation_mode_portrait: Type = 1;
  pub const mir_orientation_mode_landscape: Type = 2;
  pub const mir_orientation_mode_portrait_inverted: Type = 4;
  pub const mir_orientation_mode_landscape_inverted: Type = 8;
  pub const mir_orientation_mode_portrait_any: Type = 5;
  pub const mir_orientation_mode_landscape_any: Type = 10;
  pub const mir_orientation_mode_any: Type = 15;
}
pub mod MirPlacementGravity {
  #[doc = " Reference point for aligning a surface relative to a rectangle."]
  #[doc = " Each element (surface and rectangle) has a MirPlacementGravity assigned."]
  pub type Type = u32;
  #[doc = " the reference point is at the center."]
  pub const mir_placement_gravity_center: Type = 0;
  #[doc = " the reference point is at the middle of the left edge."]
  pub const mir_placement_gravity_west: Type = 1;
  #[doc = " the reference point is at the middle of the right edge."]
  pub const mir_placement_gravity_east: Type = 2;
  #[doc = " the reference point is in the middle of the top edge."]
  pub const mir_placement_gravity_north: Type = 4;
  #[doc = " the reference point is at the middle of the lower edge."]
  pub const mir_placement_gravity_south: Type = 8;
  #[doc = " the reference point is at the top left corner."]
  pub const mir_placement_gravity_northwest: Type = 5;
  #[doc = " the reference point is at the top right corner."]
  pub const mir_placement_gravity_northeast: Type = 6;
  #[doc = " the reference point is at the lower left corner."]
  pub const mir_placement_gravity_southwest: Type = 9;
  #[doc = " the reference point is at the lower right corner."]
  pub const mir_placement_gravity_southeast: Type = 10;
}
pub mod MirPlacementHints {
  #[doc = " Positioning hints for aligning a window relative to a rectangle."]
  #[doc = ""]
  #[doc = " These hints determine how the window should be positioned in the case that"]
  #[doc = " the surface would fall off-screen if placed in its ideal position."]
  #[doc = ""]
  #[doc = " For example, \\p mir_placement_hints_flip_x will invert the x component of"]
  #[doc = " \\p aux_rect_placement_offset and replace \\p mir_placement_gravity_northwest"]
  #[doc = " with \\p mir_placement_gravity_northeast and vice versa if the window extends"]
  #[doc = " beyond the left or right edges of the monitor."]
  #[doc = ""]
  #[doc = " If \\p mir_placement_hints_slide_x is set, the window can be shifted"]
  #[doc = " horizontally to fit on-screen."]
  #[doc = ""]
  #[doc = " If \\p mir_placement_hints_resize_x is set, the window can be shrunken"]
  #[doc = " horizontally to fit."]
  #[doc = ""]
  #[doc = " If \\p mir_placement_hints_antipodes is set then the rect gravity may be"]
  #[doc = " substituted with the opposite corner (e.g. \\p mir_placement_gravity_northeast"]
  #[doc = " to \\p mir_placement_gravity_southwest) in combination with other options."]
  #[doc = ""]
  #[doc = " When multiple flags are set, flipping should take precedence over sliding,"]
  #[doc = " which should take precedence over resizing."]
  pub type Type = u32;
  #[doc = " allow flipping anchors horizontally"]
  pub const mir_placement_hints_flip_x: Type = 1;
  #[doc = " allow flipping anchors vertically"]
  pub const mir_placement_hints_flip_y: Type = 2;
  #[doc = " allow sliding window horizontally"]
  pub const mir_placement_hints_slide_x: Type = 4;
  #[doc = " allow sliding window vertically"]
  pub const mir_placement_hints_slide_y: Type = 8;
  #[doc = " allow resizing window horizontally"]
  pub const mir_placement_hints_resize_x: Type = 16;
  #[doc = " allow resizing window vertically"]
  pub const mir_placement_hints_resize_y: Type = 32;
  #[doc = " allow flipping aux_anchor to opposite corner"]
  pub const mir_placement_hints_antipodes: Type = 64;
  #[doc = " allow flipping anchors on both axes"]
  pub const mir_placement_hints_flip_any: Type = 3;
  #[doc = " allow sliding window on both axes"]
  pub const mir_placement_hints_slide_any: Type = 12;
  #[doc = " allow resizing window on both axes"]
  pub const mir_placement_hints_resize_any: Type = 48;
}
pub mod MirShellChrome {
  #[doc = " Shell chrome"]
  pub type Type = u32;
  pub const mir_shell_chrome_normal: Type = 0;
  pub const mir_shell_chrome_low: Type = 1;
}
pub mod MirPointerConfinementState {
  pub type Type = u32;
  pub const mir_pointer_unconfined: Type = 0;
  pub const mir_pointer_confined_to_surface: Type = 1;
  pub const mir_pointer_confined_to_window: Type = 1;
}
pub mod MirDepthLayer {
  #[doc = " Depth layer controls Z ordering of surfaces."]
  #[doc = ""]
  #[doc = " A surface will always appear on top of surfaces with a lower depth layer, and below those with a higher one."]
  #[doc = " A depth layer can be converted to a number with mir::mir_depth_layer_get_index()."]
  #[doc = " This is useful for creating a list indexed by depth layer, or comparing the height of two layers."]
  pub type Type = u32;
  #[doc = "< For desktop backgrounds and alike (lowest layer)"]
  pub const mir_depth_layer_background: Type = 0;
  #[doc = "< For panels or other controls/decorations below normal windows"]
  pub const mir_depth_layer_below: Type = 1;
  #[doc = "< For normal application windows"]
  pub const mir_depth_layer_application: Type = 2;
  #[doc = "< For always-on-top application windows"]
  pub const mir_depth_layer_always_on_top: Type = 3;
  #[doc = "< For panels or notifications that want to be above normal windows"]
  pub const mir_depth_layer_above: Type = 4;
  #[doc = "< For overlays such as lock screens (heighest layer)"]
  pub const mir_depth_layer_overlay: Type = 5;
}
pub type std_string = std_basic_string<::std::os::raw::c_char>;
#[repr(C)]
pub struct std_basic_string<_CharT> {
  pub _M_dataplus: std_basic_string__Alloc_hider,
  pub _M_string_length: std_basic_string_size_type,
  pub __bindgen_anon_1: std_basic_string__bindgen_ty_2<_CharT>,
  pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_string__Char_alloc_type = [u8; 0usize];
pub type std_basic_string__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_basic_string_traits_type<_Traits> = _Traits;
pub type std_basic_string_value_type = [u8; 0usize];
pub type std_basic_string_allocator_type = std_basic_string__Char_alloc_type;
pub type std_basic_string_size_type = [u8; 0usize];
pub type std_basic_string_difference_type = [u8; 0usize];
pub type std_basic_string_reference = [u8; 0usize];
pub type std_basic_string_const_reference = [u8; 0usize];
pub type std_basic_string_pointer = [u8; 0usize];
pub type std_basic_string_const_pointer = [u8; 0usize];
pub type std_basic_string_iterator = __gnu_cxx___normal_iterator<std_basic_string_pointer>;
pub type std_basic_string_const_iterator =
  __gnu_cxx___normal_iterator<std_basic_string_const_pointer>;
pub type std_basic_string_const_reverse_iterator =
  std_reverse_iterator<std_basic_string_const_iterator>;
pub type std_basic_string_reverse_iterator = std_reverse_iterator<std_basic_string_iterator>;
pub type std_basic_string___const_iterator = std_basic_string_const_iterator;
#[repr(C)]
pub struct std_basic_string__Alloc_hider {
  pub _M_p: std_basic_string_pointer,
}
pub mod std_basic_string__bindgen_ty_1 {
  pub type Type = i32;
  pub const _S_local_capacity: Type = 0;
}
#[repr(C)]
pub struct std_basic_string__bindgen_ty_2<_CharT> {
  pub _M_local_buf: __BindgenUnionField<*mut _CharT>,
  pub _M_allocated_capacity: __BindgenUnionField<std_basic_string_size_type>,
  pub bindgen_union_field: u64,
  pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_streamoff = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_fpos<_StateT> {
  pub _M_off: std_streamoff,
  pub _M_state: _StateT,
  pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
}
pub type std_streampos = std_fpos<mbstate_t>;
pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
pub type std_true_type = u8;
pub type std_false_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___and_ {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_empty {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_unsigned {
  pub _address: u8,
}
pub type std_make_unsigned_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_extent {
  pub _address: u8,
}
pub type std_remove_extent_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_aligned_storage_type {
  pub __data: *mut ::std::os::raw::c_uchar,
  pub __align: std_aligned_storage_type__bindgen_ty_1,
  _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_aligned_storage_type__bindgen_ty_1 {
  pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_aligned_storage_type() {
  assert_eq!(
    ::std::mem::size_of::<std_aligned_storage_type>(),
    8usize,
    concat!("Size of: ", stringify!(std_aligned_storage_type))
  );
  assert_eq!(
    ::std::mem::align_of::<std_aligned_storage_type>(),
    8usize,
    concat!("Alignment of ", stringify!(std_aligned_storage_type))
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detector {
  pub _address: u8,
}
pub type std___detector_value_t = std_false_type;
pub type std___detector_type<_Default> = _Default;
pub type std___detected_or = std___detector;
pub type std___detected_or_t = std___detected_or;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
  pub _address: u8,
}
pub type std_iterator_iterator_category<_Category> = _Category;
pub type std_iterator_value_type<_Tp> = _Tp;
pub type std_iterator_difference_type<_Distance> = _Distance;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iterator_traits {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___undefined {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___get_first_arg {
  pub _address: u8,
}
pub type std___get_first_arg_type = std___undefined;
pub type std___get_first_arg_t = std___get_first_arg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___replace_first_arg {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
  pub _address: u8,
}
pub type std_pointer_traits___element_type = [u8; 0usize];
pub type std_pointer_traits___difference_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits___rebind {
  pub _address: u8,
}
pub type std_pointer_traits_pointer<_Ptr> = _Ptr;
pub type std_pointer_traits_element_type = std___detected_or_t;
pub type std_pointer_traits_difference_type = std___detected_or_t;
pub type std_pointer_traits_rebind = std_pointer_traits___rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_Iterator> {
  pub current: _Iterator,
  pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type std_reverse_iterator___traits_type = std_iterator_traits;
pub type std_reverse_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_reverse_iterator_difference_type = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_pointer = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_reference = std_reverse_iterator___traits_type;
pub type std___allocator_base = __gnu_cxx_new_allocator;
#[repr(C)]
#[derive(Debug)]
pub struct std_allocator {
  pub _address: u8,
}
pub type std_allocator_size_type = usize;
pub type std_allocator_difference_type = isize;
pub type std_allocator_pointer<_Tp> = *mut _Tp;
pub type std_allocator_const_pointer<_Tp> = *const _Tp;
pub type std_allocator_reference<_Tp> = *mut _Tp;
pub type std_allocator_const_reference<_Tp> = *const _Tp;
pub type std_allocator_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
  pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base___rebind {
  pub _address: u8,
}
pub type std___allocator_traits_base___pointer = [u8; 0usize];
pub type std___allocator_traits_base___c_pointer = [u8; 0usize];
pub type std___allocator_traits_base___v_pointer = [u8; 0usize];
pub type std___allocator_traits_base___cv_pointer = [u8; 0usize];
pub type std___allocator_traits_base___pocca = [u8; 0usize];
pub type std___allocator_traits_base___pocma = [u8; 0usize];
pub type std___allocator_traits_base___pocs = [u8; 0usize];
pub type std___allocator_traits_base___equal = [u8; 0usize];
#[test]
fn bindgen_test_layout_std___allocator_traits_base() {
  assert_eq!(
    ::std::mem::size_of::<std___allocator_traits_base>(),
    1usize,
    concat!("Size of: ", stringify!(std___allocator_traits_base))
  );
  assert_eq!(
    ::std::mem::align_of::<std___allocator_traits_base>(),
    1usize,
    concat!("Alignment of ", stringify!(std___allocator_traits_base))
  );
}
pub type std___alloc_rebind = std___allocator_traits_base;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
  pub _address: u8,
}
pub type std_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std_allocator_traits_value_type = [u8; 0usize];
pub type std_allocator_traits_pointer = std___detected_or_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Ptr {
  pub _address: u8,
}
pub type std_allocator_traits__Ptr_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Diff {
  pub _address: u8,
}
pub type std_allocator_traits__Diff_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Size {
  pub _address: u8,
}
pub type std_allocator_traits_const_pointer = [u8; 0usize];
pub type std_allocator_traits_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_const_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_difference_type = [u8; 0usize];
pub type std_allocator_traits_size_type = [u8; 0usize];
pub type std_allocator_traits_propagate_on_container_copy_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_move_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_swap = std___detected_or_t;
pub type std_allocator_traits_is_always_equal = std___detected_or_t;
pub type std_allocator_traits_rebind_alloc = std___alloc_rebind;
pub type std_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits___construct_helper {
  pub _address: u8,
}
pub type std_allocator_traits___construct_helper_type<_Alloc> = _Alloc;
pub type std_allocator_traits___has_construct = std_allocator_traits___construct_helper;
#[repr(C)]
pub struct std__Vector_base {
  pub _M_impl: std__Vector_base__Vector_impl,
}
pub type std__Vector_base__Tp_alloc_type = [u8; 0usize];
pub type std__Vector_base_pointer = [u8; 0usize];
#[repr(C)]
pub struct std__Vector_base__Vector_impl {
  pub _M_start: std__Vector_base_pointer,
  pub _M_finish: std__Vector_base_pointer,
  pub _M_end_of_storage: std__Vector_base_pointer,
}
pub type std__Vector_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
pub struct std_vector {
  pub _base: std__Vector_base,
}
pub type std_vector__Base = std__Vector_base;
pub type std_vector__Tp_alloc_type = std_vector__Base;
pub type std_vector__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_vector_value_type<_Tp> = _Tp;
pub type std_vector_pointer = std_vector__Base;
pub type std_vector_const_pointer = std_vector__Alloc_traits;
pub type std_vector_reference = std_vector__Alloc_traits;
pub type std_vector_const_reference = std_vector__Alloc_traits;
pub type std_vector_iterator = __gnu_cxx___normal_iterator<std_vector_pointer>;
pub type std_vector_const_iterator = __gnu_cxx___normal_iterator<std_vector_const_pointer>;
pub type std_vector_const_reverse_iterator = std_reverse_iterator<std_vector_const_iterator>;
pub type std_vector_reverse_iterator = std_reverse_iterator<std_vector_iterator>;
pub type std_vector_size_type = usize;
pub type std_vector_difference_type = isize;
pub type std_vector_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug)]
pub struct std_vector__Temporary_value {
  pub _M_this: *mut std_vector,
  pub __buf: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple {
  pub _address: u8,
}
pub type std_tuple__Inherited = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__TC2 {
  pub _address: u8,
}
pub type std_tuple__TCC = u8;
pub type std_tuple__TMC = u8;
pub type std_tuple__TMCT = u8;
pub type std_tuple__TNTC = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_function {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uniq_ptr_impl {
  pub _M_t: std_tuple,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uniq_ptr_impl__Ptr {
  pub _address: u8,
}
pub type std___uniq_ptr_impl__Ptr_type<_Up> = *mut _Up;
pub type std___uniq_ptr_impl__DeleterConstraint = u8;
pub type std___uniq_ptr_impl_pointer = std___uniq_ptr_impl__Ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_ptr {
  pub _M_t: std___uniq_ptr_impl,
}
pub type std_unique_ptr__DeleterConstraint = std___uniq_ptr_impl;
pub type std_unique_ptr_pointer = std___uniq_ptr_impl;
pub type std_unique_ptr_element_type<_Tp> = _Tp;
pub type std_unique_ptr_deleter_type<_Dp> = _Dp;
pub type std_unique_ptr___safe_conversion_up = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shared_count___not_alloc_shared_tag {
  pub _address: u8,
}
pub type std___shared_count___not_alloc_shared_tag_type = ::std::os::raw::c_void;
pub type std___shared_ptr_element_type = std_remove_extent;
pub type std___shared_ptr__SafeConv = u8;
pub type std___shared_ptr__Compatible = u8;
pub type std___shared_ptr__Assignable = std___shared_ptr__Compatible;
pub type std___shared_ptr__UniqCompatible = u8;
pub type std___shared_ptr__UniqAssignable = std___shared_ptr__UniqCompatible;
pub type std___shared_ptr___esft_base_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shared_ptr___has_esft_base {
  pub _base: std_false_type,
}
pub type std___weak_ptr__Compatible = u8;
pub type std___weak_ptr__Assignable = std___weak_ptr__Compatible;
pub type std___weak_ptr_element_type = std_remove_extent;
#[repr(C)]
#[derive(Debug)]
pub struct std_shared_ptr {
  pub _address: u8,
}
pub type std_shared_ptr__Constructible = u8;
pub type std_shared_ptr__Assignable = u8;
pub type std_shared_ptr_element_type = u8;
#[repr(C)]
#[derive(Debug)]
pub struct std_weak_ptr {
  pub _address: u8,
}
pub type std_weak_ptr__Constructible = u8;
pub type std_weak_ptr__Assignable = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___normal_iterator<_Iterator> {
  pub _M_current: _Iterator,
  pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type __gnu_cxx___normal_iterator___traits_type = std_iterator_traits;
pub type __gnu_cxx___normal_iterator_iterator_type<_Iterator> = _Iterator;
pub type __gnu_cxx___normal_iterator_iterator_category = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_value_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_difference_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_reference = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_pointer = __gnu_cxx___normal_iterator___traits_type;
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx_new_allocator {
  pub _address: u8,
}
pub type __gnu_cxx_new_allocator_size_type = usize;
pub type __gnu_cxx_new_allocator_difference_type = isize;
pub type __gnu_cxx_new_allocator_pointer<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_pointer<_Tp> = *const _Tp;
pub type __gnu_cxx_new_allocator_reference<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_reference<_Tp> = *const _Tp;
pub type __gnu_cxx_new_allocator_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_new_allocator_rebind {
  pub _address: u8,
}
pub type __gnu_cxx_new_allocator_rebind_other = __gnu_cxx_new_allocator;
pub type __gnu_cxx_new_allocator_propagate_on_container_move_assignment = std_true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits {
  pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_allocator_type<_Alloc> = _Alloc;
pub type __gnu_cxx___alloc_traits__Base_type = std_allocator_traits;
pub type __gnu_cxx___alloc_traits_value_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_const_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_size_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_difference_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_reference = *mut __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits_const_reference = *const __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits___is_custom_pointer = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits_rebind {
  pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_rebind_other = __gnu_cxx___alloc_traits__Base_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx__Char_types {
  pub _address: u8,
}
pub type __gnu_cxx__Char_types_int_type = ::std::os::raw::c_ulong;
pub type __gnu_cxx__Char_types_pos_type = std_streampos;
pub type __gnu_cxx__Char_types_off_type = std_streamoff;
pub type __gnu_cxx__Char_types_state_type = mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_char_traits {
  pub _address: u8,
}
pub type __gnu_cxx_char_traits_char_type<_CharT> = _CharT;
pub type __gnu_cxx_char_traits_int_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_pos_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_off_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_state_type = __gnu_cxx__Char_types;
pub type __uint8_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
  pub __count: ::std::os::raw::c_int,
  pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
  pub __wch: ::std::os::raw::c_uint,
  pub __wchb: [::std::os::raw::c_char; 4usize],
  _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
    4usize,
    concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__mbstate_t__bindgen_ty_1),
      "::",
      stringify!(__wch)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__mbstate_t__bindgen_ty_1),
      "::",
      stringify!(__wchb)
    )
  );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
  assert_eq!(
    ::std::mem::size_of::<__mbstate_t>(),
    8usize,
    concat!("Size of: ", stringify!(__mbstate_t))
  );
  assert_eq!(
    ::std::mem::align_of::<__mbstate_t>(),
    4usize,
    concat!("Alignment of ", stringify!(__mbstate_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__mbstate_t),
      "::",
      stringify!(__count)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(__mbstate_t),
      "::",
      stringify!(__value)
    )
  );
}
pub type mbstate_t = __mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_detail_IntWrapper {
  pub value: mir_geometry_detail_IntWrapper_ValueType,
}
pub type mir_geometry_detail_IntWrapper_ValueType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_WidthTag {
  _unused: [u8; 0],
}
pub type mir_geometry_Width = mir_geometry_detail_IntWrapper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_HeightTag {
  _unused: [u8; 0],
}
pub type mir_geometry_Height = mir_geometry_detail_IntWrapper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_XTag {
  _unused: [u8; 0],
}
pub type mir_geometry_X = mir_geometry_detail_IntWrapper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_YTag {
  _unused: [u8; 0],
}
pub type mir_geometry_Y = mir_geometry_detail_IntWrapper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_DeltaXTag {
  _unused: [u8; 0],
}
pub type mir_geometry_DeltaX = mir_geometry_detail_IntWrapper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_DeltaYTag {
  _unused: [u8; 0],
}
pub type mir_geometry_DeltaY = mir_geometry_detail_IntWrapper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_Point {
  pub x: mir_geometry_X,
  pub y: mir_geometry_Y,
}
#[test]
fn bindgen_test_layout_mir_geometry_Point() {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_Point>(),
    8usize,
    concat!("Size of: ", stringify!(mir_geometry_Point))
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_Point>(),
    4usize,
    concat!("Alignment of ", stringify!(mir_geometry_Point))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<mir_geometry_Point>())).x as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(mir_geometry_Point),
      "::",
      stringify!(x)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<mir_geometry_Point>())).y as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(mir_geometry_Point),
      "::",
      stringify!(y)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_Size {
  pub width: mir_geometry_Width,
  pub height: mir_geometry_Height,
}
#[test]
fn bindgen_test_layout_mir_geometry_Size() {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_Size>(),
    8usize,
    concat!("Size of: ", stringify!(mir_geometry_Size))
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_Size>(),
    4usize,
    concat!("Alignment of ", stringify!(mir_geometry_Size))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<mir_geometry_Size>())).width as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(mir_geometry_Size),
      "::",
      stringify!(width)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<mir_geometry_Size>())).height as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(mir_geometry_Size),
      "::",
      stringify!(height)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_Displacement {
  pub dx: mir_geometry_DeltaX,
  pub dy: mir_geometry_DeltaY,
}
#[test]
fn bindgen_test_layout_mir_geometry_Displacement() {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_Displacement>(),
    8usize,
    concat!("Size of: ", stringify!(mir_geometry_Displacement))
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_Displacement>(),
    4usize,
    concat!("Alignment of ", stringify!(mir_geometry_Displacement))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<mir_geometry_Displacement>())).dx as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(mir_geometry_Displacement),
      "::",
      stringify!(dx)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<mir_geometry_Displacement>())).dy as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(mir_geometry_Displacement),
      "::",
      stringify!(dy)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_geometry_Rectangle {
  pub top_left: mir_geometry_Point,
  pub size: mir_geometry_Size,
}
#[test]
fn bindgen_test_layout_mir_geometry_Rectangle() {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_Rectangle>(),
    16usize,
    concat!("Size of: ", stringify!(mir_geometry_Rectangle))
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_Rectangle>(),
    4usize,
    concat!("Alignment of ", stringify!(mir_geometry_Rectangle))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<mir_geometry_Rectangle>())).top_left as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(mir_geometry_Rectangle),
      "::",
      stringify!(top_left)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<mir_geometry_Rectangle>())).size as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(mir_geometry_Rectangle),
      "::",
      stringify!(size)
    )
  );
}
extern "C" {
  #[doc = " The bottom right boundary point of the rectangle."]
  #[doc = ""]
  #[doc = " Note that the returned point is *not* included in the rectangle"]
  #[doc = " area, that is, the rectangle is represented as [top_left,bottom_right)."]
  #[link_name = "\u{1}_ZNK3mir8geometry9Rectangle12bottom_rightEv"]
  pub fn mir_geometry_Rectangle_bottom_right(
    this: *const mir_geometry_Rectangle,
  ) -> mir_geometry_Point;
}
extern "C" {
  #[link_name = "\u{1}_ZNK3mir8geometry9Rectangle9top_rightEv"]
  pub fn mir_geometry_Rectangle_top_right(
    this: *const mir_geometry_Rectangle,
  ) -> mir_geometry_Point;
}
extern "C" {
  #[link_name = "\u{1}_ZNK3mir8geometry9Rectangle11bottom_leftEv"]
  pub fn mir_geometry_Rectangle_bottom_left(
    this: *const mir_geometry_Rectangle,
  ) -> mir_geometry_Point;
}
extern "C" {
  #[link_name = "\u{1}_ZNK3mir8geometry9Rectangle8containsERKNS0_5PointE"]
  pub fn mir_geometry_Rectangle_contains(
    this: *const mir_geometry_Rectangle,
    p: *const mir_geometry_Point,
  ) -> bool;
}
extern "C" {
  #[doc = " Test if the rectangle contains another."]
  #[doc = ""]
  #[doc = " Note that an empty rectangle can still contain other empty rectangles,"]
  #[doc = " which are treated as points or lines of thickness zero."]
  #[link_name = "\u{1}_ZNK3mir8geometry9Rectangle8containsERKS1_"]
  pub fn mir_geometry_Rectangle_contains1(
    this: *const mir_geometry_Rectangle,
    r: *const mir_geometry_Rectangle,
  ) -> bool;
}
extern "C" {
  #[link_name = "\u{1}_ZNK3mir8geometry9Rectangle8overlapsERKS1_"]
  pub fn mir_geometry_Rectangle_overlaps(
    this: *const mir_geometry_Rectangle,
    r: *const mir_geometry_Rectangle,
  ) -> bool;
}
extern "C" {
  #[link_name = "\u{1}_ZNK3mir8geometry9Rectangle17intersection_withERKS1_"]
  pub fn mir_geometry_Rectangle_intersection_with(
    this: *const mir_geometry_Rectangle,
    r: *const mir_geometry_Rectangle,
  ) -> mir_geometry_Rectangle;
}
impl mir_geometry_Rectangle {
  #[inline]
  pub unsafe fn bottom_right(&self) -> mir_geometry_Point {
    mir_geometry_Rectangle_bottom_right(self)
  }
  #[inline]
  pub unsafe fn top_right(&self) -> mir_geometry_Point {
    mir_geometry_Rectangle_top_right(self)
  }
  #[inline]
  pub unsafe fn bottom_left(&self) -> mir_geometry_Point {
    mir_geometry_Rectangle_bottom_left(self)
  }
  #[inline]
  pub unsafe fn contains(&self, p: *const mir_geometry_Point) -> bool {
    mir_geometry_Rectangle_contains(self, p)
  }
  #[inline]
  pub unsafe fn contains1(&self, r: *const mir_geometry_Rectangle) -> bool {
    mir_geometry_Rectangle_contains1(self, r)
  }
  #[inline]
  pub unsafe fn overlaps(&self, r: *const mir_geometry_Rectangle) -> bool {
    mir_geometry_Rectangle_overlaps(self, r)
  }
  #[inline]
  pub unsafe fn intersection_with(
    &self,
    r: *const mir_geometry_Rectangle,
  ) -> mir_geometry_Rectangle {
    mir_geometry_Rectangle_intersection_with(self, r)
  }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_optional_value<T> {
  pub value_: T,
  pub is_set_: bool,
  pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_scene_Surface {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_scene_SurfaceCreationParameters {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_scene_Session {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mir_shell_SurfaceSpecification {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct miral_WindowSpecification {
  pub self_: std_unique_ptr,
}
pub mod miral_WindowSpecification_BufferUsage {
  pub type Type = i32;
  pub const undefined: Type = 0;
  #[doc = " rendering using GL"]
  pub const hardware: Type = 1;
  #[doc = " rendering using direct pixel access"]
  pub const software: Type = 2;
}
pub mod miral_WindowSpecification_InputReceptionMode {
  pub type Type = i32;
  pub const normal: Type = 0;
  pub const receives_all_input: Type = 1;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct miral_WindowSpecification_AspectRatio {
  pub width: ::std::os::raw::c_uint,
  pub height: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_miral_WindowSpecification_AspectRatio() {
  assert_eq!(
    ::std::mem::size_of::<miral_WindowSpecification_AspectRatio>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(miral_WindowSpecification_AspectRatio)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<miral_WindowSpecification_AspectRatio>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(miral_WindowSpecification_AspectRatio)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<miral_WindowSpecification_AspectRatio>())).width as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(miral_WindowSpecification_AspectRatio),
      "::",
      stringify!(width)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<miral_WindowSpecification_AspectRatio>())).height as *const _ as usize
    },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(miral_WindowSpecification_AspectRatio),
      "::",
      stringify!(height)
    )
  );
}
#[doc = "@}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct miral_WindowSpecification_Self {
  _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_miral_WindowSpecification() {
  assert_eq!(
    ::std::mem::size_of::<miral_WindowSpecification>(),
    8usize,
    concat!("Size of: ", stringify!(miral_WindowSpecification))
  );
  assert_eq!(
    ::std::mem::align_of::<miral_WindowSpecification>(),
    8usize,
    concat!("Alignment of ", stringify!(miral_WindowSpecification))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<miral_WindowSpecification>())).self_ as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(miral_WindowSpecification),
      "::",
      stringify!(self_)
    )
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification6updateERN3mir5scene25SurfaceCreationParametersE"]
  pub fn miral_WindowSpecification_update(
    this: *const miral_WindowSpecification,
    params: *mut mir_scene_SurfaceCreationParameters,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification8top_leftEv"]
  pub fn miral_WindowSpecification_top_left(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_Point>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification4sizeEv"]
  pub fn miral_WindowSpecification_size(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_Size>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification4nameB5cxx11Ev"]
  pub fn miral_WindowSpecification_name(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<std_string>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification9output_idEv"]
  pub fn miral_WindowSpecification_output_id(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<::std::os::raw::c_int>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification4typeEv"]
  pub fn miral_WindowSpecification_type(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirWindowType::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification5stateEv"]
  pub fn miral_WindowSpecification_state(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirWindowState::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification21preferred_orientationEv"]
  pub fn miral_WindowSpecification_preferred_orientation(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirOrientationMode::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification8aux_rectEv"]
  pub fn miral_WindowSpecification_aux_rect(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_Rectangle>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification15placement_hintsEv"]
  pub fn miral_WindowSpecification_placement_hints(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirPlacementHints::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification24window_placement_gravityEv"]
  pub fn miral_WindowSpecification_window_placement_gravity(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirPlacementGravity::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification26aux_rect_placement_gravityEv"]
  pub fn miral_WindowSpecification_aux_rect_placement_gravity(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirPlacementGravity::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification25aux_rect_placement_offsetEv"]
  pub fn miral_WindowSpecification_aux_rect_placement_offset(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_Displacement>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification9min_widthEv"]
  pub fn miral_WindowSpecification_min_width(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_Width>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification10min_heightEv"]
  pub fn miral_WindowSpecification_min_height(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_Height>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification9max_widthEv"]
  pub fn miral_WindowSpecification_max_width(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_Width>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification10max_heightEv"]
  pub fn miral_WindowSpecification_max_height(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_Height>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification9width_incEv"]
  pub fn miral_WindowSpecification_width_inc(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_DeltaX>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification10height_incEv"]
  pub fn miral_WindowSpecification_height_inc(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_geometry_DeltaY>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification10min_aspectEv"]
  pub fn miral_WindowSpecification_min_aspect(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<miral_WindowSpecification_AspectRatio>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification10max_aspectEv"]
  pub fn miral_WindowSpecification_max_aspect(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<miral_WindowSpecification_AspectRatio>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification6parentEv"]
  pub fn miral_WindowSpecification_parent(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<std_weak_ptr>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification11input_shapeEv"]
  pub fn miral_WindowSpecification_input_shape(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<std_vector>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification10input_modeEv"]
  pub fn miral_WindowSpecification_input_mode(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<miral_WindowSpecification_InputReceptionMode::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification12shell_chromeEv"]
  pub fn miral_WindowSpecification_shell_chrome(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirShellChrome::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification15confine_pointerEv"]
  pub fn miral_WindowSpecification_confine_pointer(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirPointerConfinementState::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification8userdataEv"]
  pub fn miral_WindowSpecification_userdata(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<std_shared_ptr>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification8top_leftEv"]
  pub fn miral_WindowSpecification_top_left1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_Point>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification4sizeEv"]
  pub fn miral_WindowSpecification_size1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_Size>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification4nameB5cxx11Ev"]
  pub fn miral_WindowSpecification_name1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<std_string>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification9output_idEv"]
  pub fn miral_WindowSpecification_output_id1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<::std::os::raw::c_int>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification4typeEv"]
  pub fn miral_WindowSpecification_type1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirWindowType::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification5stateEv"]
  pub fn miral_WindowSpecification_state1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirWindowState::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification21preferred_orientationEv"]
  pub fn miral_WindowSpecification_preferred_orientation1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirOrientationMode::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification8aux_rectEv"]
  pub fn miral_WindowSpecification_aux_rect1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_Rectangle>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification15placement_hintsEv"]
  pub fn miral_WindowSpecification_placement_hints1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirPlacementHints::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification24window_placement_gravityEv"]
  pub fn miral_WindowSpecification_window_placement_gravity1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirPlacementGravity::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification26aux_rect_placement_gravityEv"]
  pub fn miral_WindowSpecification_aux_rect_placement_gravity1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirPlacementGravity::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification25aux_rect_placement_offsetEv"]
  pub fn miral_WindowSpecification_aux_rect_placement_offset1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_Displacement>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification9min_widthEv"]
  pub fn miral_WindowSpecification_min_width1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_Width>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification10min_heightEv"]
  pub fn miral_WindowSpecification_min_height1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_Height>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification9max_widthEv"]
  pub fn miral_WindowSpecification_max_width1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_Width>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification10max_heightEv"]
  pub fn miral_WindowSpecification_max_height1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_Height>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification9width_incEv"]
  pub fn miral_WindowSpecification_width_inc1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_DeltaX>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification10height_incEv"]
  pub fn miral_WindowSpecification_height_inc1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_geometry_DeltaY>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification10min_aspectEv"]
  pub fn miral_WindowSpecification_min_aspect1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<miral_WindowSpecification_AspectRatio>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification10max_aspectEv"]
  pub fn miral_WindowSpecification_max_aspect1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<miral_WindowSpecification_AspectRatio>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification6parentEv"]
  pub fn miral_WindowSpecification_parent1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<std_weak_ptr>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification11input_shapeEv"]
  pub fn miral_WindowSpecification_input_shape1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<std_vector>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification10input_modeEv"]
  pub fn miral_WindowSpecification_input_mode1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<miral_WindowSpecification_InputReceptionMode::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification12shell_chromeEv"]
  pub fn miral_WindowSpecification_shell_chrome1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirShellChrome::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification15confine_pointerEv"]
  pub fn miral_WindowSpecification_confine_pointer1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirPointerConfinementState::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification8userdataEv"]
  pub fn miral_WindowSpecification_userdata1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<std_shared_ptr>;
}
extern "C" {
  #[doc = " The depth layer of a child window is updated with the depth layer of its parent, but can be overridden"]
  #[doc = "@{"]
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification11depth_layerEv"]
  pub fn miral_WindowSpecification_depth_layer(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirDepthLayer::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification11depth_layerEv"]
  pub fn miral_WindowSpecification_depth_layer1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirDepthLayer::Type>;
}
extern "C" {
  #[doc = " The set of window eges that are attched to edges of the output"]
  #[doc = " If attached to perpendicular edges, it is attached to the corner where the two edges intersect"]
  #[doc = " If attached to oposite edges (eg left and right), it is stretched across the output in that direction"]
  #[doc = " If all edges are specified, it takes up the entire output"]
  #[doc = "@{"]
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification14attached_edgesEv"]
  pub fn miral_WindowSpecification_attached_edges(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<MirPlacementGravity::Type>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification14attached_edgesEv"]
  pub fn miral_WindowSpecification_attached_edges1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<MirPlacementGravity::Type>;
}
extern "C" {
  #[doc = " The area over which the window should not be occluded"]
  #[doc = " Only meaningful for windows attached to an edge"]
  #[doc = " If the outer optional is unset (the default), the window's exclusive rect is not changed by this spec"]
  #[doc = " If the outer optional is set but the inner is not, the window's exclusive rect is cleared"]
  #[doc = "@{"]
  #[link_name = "\u{1}_ZNK5miral19WindowSpecification14exclusive_rectEv"]
  pub fn miral_WindowSpecification_exclusive_rect(
    this: *const miral_WindowSpecification,
  ) -> *const mir_optional_value<mir_optional_value<mir_geometry_Rectangle>>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecification14exclusive_rectEv"]
  pub fn miral_WindowSpecification_exclusive_rect1(
    this: *mut miral_WindowSpecification,
  ) -> *mut mir_optional_value<mir_optional_value<mir_geometry_Rectangle>>;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecificationC1Ev"]
  pub fn miral_WindowSpecification_WindowSpecification(this: *mut miral_WindowSpecification);
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecificationC1ERKS0_"]
  pub fn miral_WindowSpecification_WindowSpecification1(
    this: *mut miral_WindowSpecification,
    that: *const miral_WindowSpecification,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecificationC1ERKN3mir5shell20SurfaceSpecificationE"]
  pub fn miral_WindowSpecification_WindowSpecification2(
    this: *mut miral_WindowSpecification,
    spec: *const mir_shell_SurfaceSpecification,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecificationC1ERKN3mir5scene25SurfaceCreationParametersE"]
  pub fn miral_WindowSpecification_WindowSpecification3(
    this: *mut miral_WindowSpecification,
    params: *const mir_scene_SurfaceCreationParameters,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral19WindowSpecificationD1Ev"]
  pub fn miral_WindowSpecification_WindowSpecification_destructor(
    this: *mut miral_WindowSpecification,
  );
}
impl miral_WindowSpecification {
  #[inline]
  pub unsafe fn update(&self, params: *mut mir_scene_SurfaceCreationParameters) {
    miral_WindowSpecification_update(self, params)
  }
  #[inline]
  pub unsafe fn top_left(&self) -> *const mir_optional_value<mir_geometry_Point> {
    miral_WindowSpecification_top_left(self)
  }
  #[inline]
  pub unsafe fn size(&self) -> *const mir_optional_value<mir_geometry_Size> {
    miral_WindowSpecification_size(self)
  }
  #[inline]
  pub unsafe fn name(&self) -> *const mir_optional_value<std_string> {
    miral_WindowSpecification_name(self)
  }
  #[inline]
  pub unsafe fn output_id(&self) -> *const mir_optional_value<::std::os::raw::c_int> {
    miral_WindowSpecification_output_id(self)
  }
  #[inline]
  pub unsafe fn type_(&self) -> *const mir_optional_value<MirWindowType::Type> {
    miral_WindowSpecification_type(self)
  }
  #[inline]
  pub unsafe fn state(&self) -> *const mir_optional_value<MirWindowState::Type> {
    miral_WindowSpecification_state(self)
  }
  #[inline]
  pub unsafe fn preferred_orientation(
    &self,
  ) -> *const mir_optional_value<MirOrientationMode::Type> {
    miral_WindowSpecification_preferred_orientation(self)
  }
  #[inline]
  pub unsafe fn aux_rect(&self) -> *const mir_optional_value<mir_geometry_Rectangle> {
    miral_WindowSpecification_aux_rect(self)
  }
  #[inline]
  pub unsafe fn placement_hints(&self) -> *const mir_optional_value<MirPlacementHints::Type> {
    miral_WindowSpecification_placement_hints(self)
  }
  #[inline]
  pub unsafe fn window_placement_gravity(
    &self,
  ) -> *const mir_optional_value<MirPlacementGravity::Type> {
    miral_WindowSpecification_window_placement_gravity(self)
  }
  #[inline]
  pub unsafe fn aux_rect_placement_gravity(
    &self,
  ) -> *const mir_optional_value<MirPlacementGravity::Type> {
    miral_WindowSpecification_aux_rect_placement_gravity(self)
  }
  #[inline]
  pub unsafe fn aux_rect_placement_offset(
    &self,
  ) -> *const mir_optional_value<mir_geometry_Displacement> {
    miral_WindowSpecification_aux_rect_placement_offset(self)
  }
  #[inline]
  pub unsafe fn min_width(&self) -> *const mir_optional_value<mir_geometry_Width> {
    miral_WindowSpecification_min_width(self)
  }
  #[inline]
  pub unsafe fn min_height(&self) -> *const mir_optional_value<mir_geometry_Height> {
    miral_WindowSpecification_min_height(self)
  }
  #[inline]
  pub unsafe fn max_width(&self) -> *const mir_optional_value<mir_geometry_Width> {
    miral_WindowSpecification_max_width(self)
  }
  #[inline]
  pub unsafe fn max_height(&self) -> *const mir_optional_value<mir_geometry_Height> {
    miral_WindowSpecification_max_height(self)
  }
  #[inline]
  pub unsafe fn width_inc(&self) -> *const mir_optional_value<mir_geometry_DeltaX> {
    miral_WindowSpecification_width_inc(self)
  }
  #[inline]
  pub unsafe fn height_inc(&self) -> *const mir_optional_value<mir_geometry_DeltaY> {
    miral_WindowSpecification_height_inc(self)
  }
  #[inline]
  pub unsafe fn min_aspect(
    &self,
  ) -> *const mir_optional_value<miral_WindowSpecification_AspectRatio> {
    miral_WindowSpecification_min_aspect(self)
  }
  #[inline]
  pub unsafe fn max_aspect(
    &self,
  ) -> *const mir_optional_value<miral_WindowSpecification_AspectRatio> {
    miral_WindowSpecification_max_aspect(self)
  }
  #[inline]
  pub unsafe fn parent(&self) -> *const mir_optional_value<std_weak_ptr> {
    miral_WindowSpecification_parent(self)
  }
  #[inline]
  pub unsafe fn input_shape(&self) -> *const mir_optional_value<std_vector> {
    miral_WindowSpecification_input_shape(self)
  }
  #[inline]
  pub unsafe fn input_mode(
    &self,
  ) -> *const mir_optional_value<miral_WindowSpecification_InputReceptionMode::Type> {
    miral_WindowSpecification_input_mode(self)
  }
  #[inline]
  pub unsafe fn shell_chrome(&self) -> *const mir_optional_value<MirShellChrome::Type> {
    miral_WindowSpecification_shell_chrome(self)
  }
  #[inline]
  pub unsafe fn confine_pointer(
    &self,
  ) -> *const mir_optional_value<MirPointerConfinementState::Type> {
    miral_WindowSpecification_confine_pointer(self)
  }
  #[inline]
  pub unsafe fn userdata(&self) -> *const mir_optional_value<std_shared_ptr> {
    miral_WindowSpecification_userdata(self)
  }
  #[inline]
  pub unsafe fn top_left1(&mut self) -> *mut mir_optional_value<mir_geometry_Point> {
    miral_WindowSpecification_top_left1(self)
  }
  #[inline]
  pub unsafe fn size1(&mut self) -> *mut mir_optional_value<mir_geometry_Size> {
    miral_WindowSpecification_size1(self)
  }
  #[inline]
  pub unsafe fn name1(&mut self) -> *mut mir_optional_value<std_string> {
    miral_WindowSpecification_name1(self)
  }
  #[inline]
  pub unsafe fn output_id1(&mut self) -> *mut mir_optional_value<::std::os::raw::c_int> {
    miral_WindowSpecification_output_id1(self)
  }
  #[inline]
  pub unsafe fn type1(&mut self) -> *mut mir_optional_value<MirWindowType::Type> {
    miral_WindowSpecification_type1(self)
  }
  #[inline]
  pub unsafe fn state1(&mut self) -> *mut mir_optional_value<MirWindowState::Type> {
    miral_WindowSpecification_state1(self)
  }
  #[inline]
  pub unsafe fn preferred_orientation1(
    &mut self,
  ) -> *mut mir_optional_value<MirOrientationMode::Type> {
    miral_WindowSpecification_preferred_orientation1(self)
  }
  #[inline]
  pub unsafe fn aux_rect1(&mut self) -> *mut mir_optional_value<mir_geometry_Rectangle> {
    miral_WindowSpecification_aux_rect1(self)
  }
  #[inline]
  pub unsafe fn placement_hints1(&mut self) -> *mut mir_optional_value<MirPlacementHints::Type> {
    miral_WindowSpecification_placement_hints1(self)
  }
  #[inline]
  pub unsafe fn window_placement_gravity1(
    &mut self,
  ) -> *mut mir_optional_value<MirPlacementGravity::Type> {
    miral_WindowSpecification_window_placement_gravity1(self)
  }
  #[inline]
  pub unsafe fn aux_rect_placement_gravity1(
    &mut self,
  ) -> *mut mir_optional_value<MirPlacementGravity::Type> {
    miral_WindowSpecification_aux_rect_placement_gravity1(self)
  }
  #[inline]
  pub unsafe fn aux_rect_placement_offset1(
    &mut self,
  ) -> *mut mir_optional_value<mir_geometry_Displacement> {
    miral_WindowSpecification_aux_rect_placement_offset1(self)
  }
  #[inline]
  pub unsafe fn min_width1(&mut self) -> *mut mir_optional_value<mir_geometry_Width> {
    miral_WindowSpecification_min_width1(self)
  }
  #[inline]
  pub unsafe fn min_height1(&mut self) -> *mut mir_optional_value<mir_geometry_Height> {
    miral_WindowSpecification_min_height1(self)
  }
  #[inline]
  pub unsafe fn max_width1(&mut self) -> *mut mir_optional_value<mir_geometry_Width> {
    miral_WindowSpecification_max_width1(self)
  }
  #[inline]
  pub unsafe fn max_height1(&mut self) -> *mut mir_optional_value<mir_geometry_Height> {
    miral_WindowSpecification_max_height1(self)
  }
  #[inline]
  pub unsafe fn width_inc1(&mut self) -> *mut mir_optional_value<mir_geometry_DeltaX> {
    miral_WindowSpecification_width_inc1(self)
  }
  #[inline]
  pub unsafe fn height_inc1(&mut self) -> *mut mir_optional_value<mir_geometry_DeltaY> {
    miral_WindowSpecification_height_inc1(self)
  }
  #[inline]
  pub unsafe fn min_aspect1(
    &mut self,
  ) -> *mut mir_optional_value<miral_WindowSpecification_AspectRatio> {
    miral_WindowSpecification_min_aspect1(self)
  }
  #[inline]
  pub unsafe fn max_aspect1(
    &mut self,
  ) -> *mut mir_optional_value<miral_WindowSpecification_AspectRatio> {
    miral_WindowSpecification_max_aspect1(self)
  }
  #[inline]
  pub unsafe fn parent1(&mut self) -> *mut mir_optional_value<std_weak_ptr> {
    miral_WindowSpecification_parent1(self)
  }
  #[inline]
  pub unsafe fn input_shape1(&mut self) -> *mut mir_optional_value<std_vector> {
    miral_WindowSpecification_input_shape1(self)
  }
  #[inline]
  pub unsafe fn input_mode1(
    &mut self,
  ) -> *mut mir_optional_value<miral_WindowSpecification_InputReceptionMode::Type> {
    miral_WindowSpecification_input_mode1(self)
  }
  #[inline]
  pub unsafe fn shell_chrome1(&mut self) -> *mut mir_optional_value<MirShellChrome::Type> {
    miral_WindowSpecification_shell_chrome1(self)
  }
  #[inline]
  pub unsafe fn confine_pointer1(
    &mut self,
  ) -> *mut mir_optional_value<MirPointerConfinementState::Type> {
    miral_WindowSpecification_confine_pointer1(self)
  }
  #[inline]
  pub unsafe fn userdata1(&mut self) -> *mut mir_optional_value<std_shared_ptr> {
    miral_WindowSpecification_userdata1(self)
  }
  #[inline]
  pub unsafe fn depth_layer(&self) -> *const mir_optional_value<MirDepthLayer::Type> {
    miral_WindowSpecification_depth_layer(self)
  }
  #[inline]
  pub unsafe fn depth_layer1(&mut self) -> *mut mir_optional_value<MirDepthLayer::Type> {
    miral_WindowSpecification_depth_layer1(self)
  }
  #[inline]
  pub unsafe fn attached_edges(&self) -> *const mir_optional_value<MirPlacementGravity::Type> {
    miral_WindowSpecification_attached_edges(self)
  }
  #[inline]
  pub unsafe fn attached_edges1(&mut self) -> *mut mir_optional_value<MirPlacementGravity::Type> {
    miral_WindowSpecification_attached_edges1(self)
  }
  #[inline]
  pub unsafe fn exclusive_rect(
    &self,
  ) -> *const mir_optional_value<mir_optional_value<mir_geometry_Rectangle>> {
    miral_WindowSpecification_exclusive_rect(self)
  }
  #[inline]
  pub unsafe fn exclusive_rect1(
    &mut self,
  ) -> *mut mir_optional_value<mir_optional_value<mir_geometry_Rectangle>> {
    miral_WindowSpecification_exclusive_rect1(self)
  }
  #[inline]
  pub unsafe fn new() -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_WindowSpecification_WindowSpecification(&mut __bindgen_tmp);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn new1(that: *const miral_WindowSpecification) -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_WindowSpecification_WindowSpecification1(&mut __bindgen_tmp, that);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn new2(spec: *const mir_shell_SurfaceSpecification) -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_WindowSpecification_WindowSpecification2(&mut __bindgen_tmp, spec);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn new3(params: *const mir_scene_SurfaceCreationParameters) -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_WindowSpecification_WindowSpecification3(&mut __bindgen_tmp, params);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn destruct(&mut self) {
    miral_WindowSpecification_WindowSpecification_destructor(self)
  }
}
pub type miral_Application = std_shared_ptr;
#[doc = " Handle class to manage a Mir surface. It may be null (e.g. default initialized)"]
#[repr(C)]
#[derive(Debug)]
pub struct miral_Window {
  pub self_: std_shared_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct miral_Window_Self {
  _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_miral_Window() {
  assert_eq!(
    ::std::mem::size_of::<miral_Window>(),
    16usize,
    concat!("Size of: ", stringify!(miral_Window))
  );
  assert_eq!(
    ::std::mem::align_of::<miral_Window>(),
    8usize,
    concat!("Alignment of ", stringify!(miral_Window))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<miral_Window>())).self_ as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(miral_Window),
      "::",
      stringify!(self_)
    )
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral6Window8top_leftEv"]
  pub fn miral_Window_top_left(this: *const miral_Window) -> mir_geometry_Point;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral6Window4sizeEv"]
  pub fn miral_Window_size(this: *const miral_Window) -> mir_geometry_Size;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral6Window11applicationEv"]
  pub fn miral_Window_application(this: *const miral_Window) -> miral_Application;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral6Window6resizeERKN3mir8geometry4SizeE"]
  pub fn miral_Window_resize(this: *mut miral_Window, size: *const mir_geometry_Size);
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral6Window7move_toEN3mir8geometry5PointE"]
  pub fn miral_Window_move_to(this: *mut miral_Window, top_left: mir_geometry_Point);
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral6WindowC1Ev"]
  pub fn miral_Window_Window(this: *mut miral_Window);
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral6WindowC1ERKSt10shared_ptrIN3mir5scene7SessionEERKS1_INS3_7SurfaceEE"]
  pub fn miral_Window_Window1(
    this: *mut miral_Window,
    application: *const miral_Application,
    surface: *const std_shared_ptr,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral6WindowD1Ev"]
  pub fn miral_Window_Window_destructor(this: *mut miral_Window);
}
impl miral_Window {
  #[inline]
  pub unsafe fn top_left(&self) -> mir_geometry_Point {
    miral_Window_top_left(self)
  }
  #[inline]
  pub unsafe fn size(&self) -> mir_geometry_Size {
    miral_Window_size(self)
  }
  #[inline]
  pub unsafe fn application(&self) -> miral_Application {
    miral_Window_application(self)
  }
  #[inline]
  pub unsafe fn resize(&mut self, size: *const mir_geometry_Size) {
    miral_Window_resize(self, size)
  }
  #[inline]
  pub unsafe fn move_to(&mut self, top_left: mir_geometry_Point) {
    miral_Window_move_to(self, top_left)
  }
  #[inline]
  pub unsafe fn new() -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_Window_Window(&mut __bindgen_tmp);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn new1(
    application: *const miral_Application,
    surface: *const std_shared_ptr,
  ) -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_Window_Window1(&mut __bindgen_tmp, application, surface);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn destruct(&mut self) {
    miral_Window_Window_destructor(self)
  }
}
#[repr(C)]
#[derive(Debug)]
pub struct miral_WindowInfo {
  pub self_: std_unique_ptr,
}
pub type miral_WindowInfo_AspectRatio = miral_WindowSpecification_AspectRatio;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct miral_WindowInfo_Self {
  _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_miral_WindowInfo() {
  assert_eq!(
    ::std::mem::size_of::<miral_WindowInfo>(),
    8usize,
    concat!("Size of: ", stringify!(miral_WindowInfo))
  );
  assert_eq!(
    ::std::mem::align_of::<miral_WindowInfo>(),
    8usize,
    concat!("Alignment of ", stringify!(miral_WindowInfo))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<miral_WindowInfo>())).self_ as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(miral_WindowInfo),
      "::",
      stringify!(self_)
    )
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo13can_be_activeEv"]
  pub fn miral_WindowInfo_can_be_active(this: *const miral_WindowInfo) -> bool;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo12can_morph_toE13MirWindowType"]
  pub fn miral_WindowInfo_can_morph_to(
    this: *const miral_WindowInfo,
    new_type: MirWindowType::Type,
  ) -> bool;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo16must_have_parentEv"]
  pub fn miral_WindowInfo_must_have_parent(this: *const miral_WindowInfo) -> bool;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo20must_not_have_parentEv"]
  pub fn miral_WindowInfo_must_not_have_parent(this: *const miral_WindowInfo) -> bool;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo10is_visibleEv"]
  pub fn miral_WindowInfo_is_visible(this: *const miral_WindowInfo) -> bool;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo14needs_titlebarE13MirWindowType"]
  pub fn miral_WindowInfo_needs_titlebar(type_: MirWindowType::Type) -> bool;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo16constrain_resizeERN3mir8geometry5PointERNS2_4SizeE"]
  pub fn miral_WindowInfo_constrain_resize(
    this: *const miral_WindowInfo,
    requested_pos: *mut mir_geometry_Point,
    requested_size: *mut mir_geometry_Size,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo6windowEv"]
  pub fn miral_WindowInfo_window(this: *const miral_WindowInfo) -> *mut miral_Window;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo4nameB5cxx11Ev"]
  pub fn miral_WindowInfo_name(this: *const miral_WindowInfo) -> std_string;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo4nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
  pub fn miral_WindowInfo_name1(this: *mut miral_WindowInfo, name: *const std_string);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo4typeEv"]
  pub fn miral_WindowInfo_type(this: *const miral_WindowInfo) -> MirWindowType::Type;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo4typeE13MirWindowType"]
  pub fn miral_WindowInfo_type1(this: *mut miral_WindowInfo, type_: MirWindowType::Type);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo5stateEv"]
  pub fn miral_WindowInfo_state(this: *const miral_WindowInfo) -> MirWindowState::Type;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo5stateE14MirWindowState"]
  pub fn miral_WindowInfo_state1(this: *mut miral_WindowInfo, state: MirWindowState::Type);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo12restore_rectEv"]
  pub fn miral_WindowInfo_restore_rect(this: *const miral_WindowInfo) -> mir_geometry_Rectangle;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo12restore_rectERKN3mir8geometry9RectangleE"]
  pub fn miral_WindowInfo_restore_rect1(
    this: *mut miral_WindowInfo,
    restore_rect: *const mir_geometry_Rectangle,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo6parentEv"]
  pub fn miral_WindowInfo_parent(this: *const miral_WindowInfo) -> miral_Window;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo6parentERKNS_6WindowE"]
  pub fn miral_WindowInfo_parent1(this: *mut miral_WindowInfo, parent: *const miral_Window);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo8childrenEv"]
  pub fn miral_WindowInfo_children(this: *const miral_WindowInfo) -> *const std_vector;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo9add_childERKNS_6WindowE"]
  pub fn miral_WindowInfo_add_child(this: *mut miral_WindowInfo, child: *const miral_Window);
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo12remove_childERKNS_6WindowE"]
  pub fn miral_WindowInfo_remove_child(this: *mut miral_WindowInfo, child: *const miral_Window);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo9min_widthEv"]
  pub fn miral_WindowInfo_min_width(this: *const miral_WindowInfo) -> mir_geometry_Width;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo9min_widthEN3mir8geometry6detail10IntWrapperINS2_8WidthTagEEE"]
  pub fn miral_WindowInfo_min_width1(this: *mut miral_WindowInfo, min_width: mir_geometry_Width);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo10min_heightEv"]
  pub fn miral_WindowInfo_min_height(this: *const miral_WindowInfo) -> mir_geometry_Height;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo10min_heightEN3mir8geometry6detail10IntWrapperINS2_9HeightTagEEE"]
  pub fn miral_WindowInfo_min_height1(this: *mut miral_WindowInfo, min_height: mir_geometry_Height);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo9max_widthEv"]
  pub fn miral_WindowInfo_max_width(this: *const miral_WindowInfo) -> mir_geometry_Width;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo9max_widthEN3mir8geometry6detail10IntWrapperINS2_8WidthTagEEE"]
  pub fn miral_WindowInfo_max_width1(this: *mut miral_WindowInfo, max_width: mir_geometry_Width);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo10max_heightEv"]
  pub fn miral_WindowInfo_max_height(this: *const miral_WindowInfo) -> mir_geometry_Height;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo10max_heightEN3mir8geometry6detail10IntWrapperINS2_9HeightTagEEE"]
  pub fn miral_WindowInfo_max_height1(this: *mut miral_WindowInfo, max_height: mir_geometry_Height);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo9width_incEv"]
  pub fn miral_WindowInfo_width_inc(this: *const miral_WindowInfo) -> mir_geometry_DeltaX;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo9width_incEN3mir8geometry6detail10IntWrapperINS2_9DeltaXTagEEE"]
  pub fn miral_WindowInfo_width_inc1(this: *mut miral_WindowInfo, width_inc: mir_geometry_DeltaX);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo10height_incEv"]
  pub fn miral_WindowInfo_height_inc(this: *const miral_WindowInfo) -> mir_geometry_DeltaY;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo10height_incEN3mir8geometry6detail10IntWrapperINS2_9DeltaYTagEEE"]
  pub fn miral_WindowInfo_height_inc1(this: *mut miral_WindowInfo, height_inc: mir_geometry_DeltaY);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo10min_aspectEv"]
  pub fn miral_WindowInfo_min_aspect(this: *const miral_WindowInfo)
    -> miral_WindowInfo_AspectRatio;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo10min_aspectENS_19WindowSpecification11AspectRatioE"]
  pub fn miral_WindowInfo_min_aspect1(
    this: *mut miral_WindowInfo,
    min_aspect: miral_WindowInfo_AspectRatio,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo10max_aspectEv"]
  pub fn miral_WindowInfo_max_aspect(this: *const miral_WindowInfo)
    -> miral_WindowInfo_AspectRatio;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo10max_aspectENS_19WindowSpecification11AspectRatioE"]
  pub fn miral_WindowInfo_max_aspect1(
    this: *mut miral_WindowInfo,
    max_aspect: miral_WindowInfo_AspectRatio,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo13has_output_idEv"]
  pub fn miral_WindowInfo_has_output_id(this: *const miral_WindowInfo) -> bool;
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo9output_idEv"]
  pub fn miral_WindowInfo_output_id(this: *const miral_WindowInfo) -> ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo9output_idEN3mir14optional_valueIiEE"]
  pub fn miral_WindowInfo_output_id1(
    this: *mut miral_WindowInfo,
    output_id: mir_optional_value<::std::os::raw::c_int>,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo21preferred_orientationEv"]
  pub fn miral_WindowInfo_preferred_orientation(
    this: *const miral_WindowInfo,
  ) -> MirOrientationMode::Type;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo21preferred_orientationE18MirOrientationMode"]
  pub fn miral_WindowInfo_preferred_orientation1(
    this: *mut miral_WindowInfo,
    preferred_orientation: MirOrientationMode::Type,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo15confine_pointerEv"]
  pub fn miral_WindowInfo_confine_pointer(
    this: *const miral_WindowInfo,
  ) -> MirPointerConfinementState::Type;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo15confine_pointerE26MirPointerConfinementState"]
  pub fn miral_WindowInfo_confine_pointer1(
    this: *mut miral_WindowInfo,
    confinement: MirPointerConfinementState::Type,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo12shell_chromeEv"]
  pub fn miral_WindowInfo_shell_chrome(this: *const miral_WindowInfo) -> MirShellChrome::Type;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo12shell_chromeE14MirShellChrome"]
  pub fn miral_WindowInfo_shell_chrome1(this: *mut miral_WindowInfo, chrome: MirShellChrome::Type);
}
extern "C" {
  #[doc = " This can be used by client code to store window manager specific information"]
  #[link_name = "\u{1}_ZNK5miral10WindowInfo8userdataEv"]
  pub fn miral_WindowInfo_userdata(this: *const miral_WindowInfo) -> std_shared_ptr;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo8userdataESt10shared_ptrIvE"]
  pub fn miral_WindowInfo_userdata1(this: *mut miral_WindowInfo, userdata: std_shared_ptr);
}
extern "C" {
  #[link_name = "\u{1}_ZNK5miral10WindowInfo11depth_layerEv"]
  pub fn miral_WindowInfo_depth_layer(this: *const miral_WindowInfo) -> MirDepthLayer::Type;
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfo11depth_layerE13MirDepthLayer"]
  pub fn miral_WindowInfo_depth_layer1(
    this: *mut miral_WindowInfo,
    depth_layer: MirDepthLayer::Type,
  );
}
extern "C" {
  #[doc = " Get the edges of the output that the window is attached to"]
  #[doc = " (only meaningful for windows in state mir_window_state_attached)"]
  #[link_name = "\u{1}_ZNK5miral10WindowInfo14attached_edgesEv"]
  pub fn miral_WindowInfo_attached_edges(
    this: *const miral_WindowInfo,
  ) -> MirPlacementGravity::Type;
}
extern "C" {
  #[doc = " Set the edges of the output that the window should be attached to"]
  #[doc = " (only meaningful for windows in state mir_window_state_attached)"]
  #[link_name = "\u{1}_ZN5miral10WindowInfo14attached_edgesE19MirPlacementGravity"]
  pub fn miral_WindowInfo_attached_edges1(
    this: *mut miral_WindowInfo,
    edges: MirPlacementGravity::Type,
  );
}
extern "C" {
  #[doc = " Mir will try to avoid occluding the area covered by this rectangle (relative to the window)"]
  #[doc = " (only meaningful when the window is attached to an edge)"]
  #[link_name = "\u{1}_ZNK5miral10WindowInfo14exclusive_rectEv"]
  pub fn miral_WindowInfo_exclusive_rect(
    this: *const miral_WindowInfo,
  ) -> mir_optional_value<mir_geometry_Rectangle>;
}
extern "C" {
  #[doc = " Set the area to keep exclusive to this window"]
  #[doc = " (only meaningful when the window is attached to an edge)"]
  #[link_name = "\u{1}_ZN5miral10WindowInfo14exclusive_rectERKN3mir14optional_valueINS1_8geometry9RectangleEEE"]
  pub fn miral_WindowInfo_exclusive_rect1(
    this: *mut miral_WindowInfo,
    rect: *const mir_optional_value<mir_geometry_Rectangle>,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfoC1Ev"]
  pub fn miral_WindowInfo_WindowInfo(this: *mut miral_WindowInfo);
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfoC1ERKNS_6WindowERKNS_19WindowSpecificationE"]
  pub fn miral_WindowInfo_WindowInfo1(
    this: *mut miral_WindowInfo,
    window: *const miral_Window,
    params: *const miral_WindowSpecification,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfoC1ERKS0_"]
  pub fn miral_WindowInfo_WindowInfo2(this: *mut miral_WindowInfo, that: *const miral_WindowInfo);
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral10WindowInfoD1Ev"]
  pub fn miral_WindowInfo_WindowInfo_destructor(this: *mut miral_WindowInfo);
}
impl miral_WindowInfo {
  #[inline]
  pub unsafe fn can_be_active(&self) -> bool {
    miral_WindowInfo_can_be_active(self)
  }
  #[inline]
  pub unsafe fn can_morph_to(&self, new_type: MirWindowType::Type) -> bool {
    miral_WindowInfo_can_morph_to(self, new_type)
  }
  #[inline]
  pub unsafe fn must_have_parent(&self) -> bool {
    miral_WindowInfo_must_have_parent(self)
  }
  #[inline]
  pub unsafe fn must_not_have_parent(&self) -> bool {
    miral_WindowInfo_must_not_have_parent(self)
  }
  #[inline]
  pub unsafe fn is_visible(&self) -> bool {
    miral_WindowInfo_is_visible(self)
  }
  #[inline]
  pub unsafe fn needs_titlebar(type_: MirWindowType::Type) -> bool {
    miral_WindowInfo_needs_titlebar(type_)
  }
  #[inline]
  pub unsafe fn constrain_resize(
    &self,
    requested_pos: *mut mir_geometry_Point,
    requested_size: *mut mir_geometry_Size,
  ) {
    miral_WindowInfo_constrain_resize(self, requested_pos, requested_size)
  }
  #[inline]
  pub unsafe fn window(&self) -> *mut miral_Window {
    miral_WindowInfo_window(self)
  }
  #[inline]
  pub unsafe fn name(&self) -> std_string {
    miral_WindowInfo_name(self)
  }
  #[inline]
  pub unsafe fn name1(&mut self, name: *const std_string) {
    miral_WindowInfo_name1(self, name)
  }
  #[inline]
  pub unsafe fn type_(&self) -> MirWindowType::Type {
    miral_WindowInfo_type(self)
  }
  #[inline]
  pub unsafe fn type1(&mut self, type_: MirWindowType::Type) {
    miral_WindowInfo_type1(self, type_)
  }
  #[inline]
  pub unsafe fn state(&self) -> MirWindowState::Type {
    miral_WindowInfo_state(self)
  }
  #[inline]
  pub unsafe fn state1(&mut self, state: MirWindowState::Type) {
    miral_WindowInfo_state1(self, state)
  }
  #[inline]
  pub unsafe fn restore_rect(&self) -> mir_geometry_Rectangle {
    miral_WindowInfo_restore_rect(self)
  }
  #[inline]
  pub unsafe fn restore_rect1(&mut self, restore_rect: *const mir_geometry_Rectangle) {
    miral_WindowInfo_restore_rect1(self, restore_rect)
  }
  #[inline]
  pub unsafe fn parent(&self) -> miral_Window {
    miral_WindowInfo_parent(self)
  }
  #[inline]
  pub unsafe fn parent1(&mut self, parent: *const miral_Window) {
    miral_WindowInfo_parent1(self, parent)
  }
  #[inline]
  pub unsafe fn children(&self) -> *const std_vector {
    miral_WindowInfo_children(self)
  }
  #[inline]
  pub unsafe fn add_child(&mut self, child: *const miral_Window) {
    miral_WindowInfo_add_child(self, child)
  }
  #[inline]
  pub unsafe fn remove_child(&mut self, child: *const miral_Window) {
    miral_WindowInfo_remove_child(self, child)
  }
  #[inline]
  pub unsafe fn min_width(&self) -> mir_geometry_Width {
    miral_WindowInfo_min_width(self)
  }
  #[inline]
  pub unsafe fn min_width1(&mut self, min_width: mir_geometry_Width) {
    miral_WindowInfo_min_width1(self, min_width)
  }
  #[inline]
  pub unsafe fn min_height(&self) -> mir_geometry_Height {
    miral_WindowInfo_min_height(self)
  }
  #[inline]
  pub unsafe fn min_height1(&mut self, min_height: mir_geometry_Height) {
    miral_WindowInfo_min_height1(self, min_height)
  }
  #[inline]
  pub unsafe fn max_width(&self) -> mir_geometry_Width {
    miral_WindowInfo_max_width(self)
  }
  #[inline]
  pub unsafe fn max_width1(&mut self, max_width: mir_geometry_Width) {
    miral_WindowInfo_max_width1(self, max_width)
  }
  #[inline]
  pub unsafe fn max_height(&self) -> mir_geometry_Height {
    miral_WindowInfo_max_height(self)
  }
  #[inline]
  pub unsafe fn max_height1(&mut self, max_height: mir_geometry_Height) {
    miral_WindowInfo_max_height1(self, max_height)
  }
  #[inline]
  pub unsafe fn width_inc(&self) -> mir_geometry_DeltaX {
    miral_WindowInfo_width_inc(self)
  }
  #[inline]
  pub unsafe fn width_inc1(&mut self, width_inc: mir_geometry_DeltaX) {
    miral_WindowInfo_width_inc1(self, width_inc)
  }
  #[inline]
  pub unsafe fn height_inc(&self) -> mir_geometry_DeltaY {
    miral_WindowInfo_height_inc(self)
  }
  #[inline]
  pub unsafe fn height_inc1(&mut self, height_inc: mir_geometry_DeltaY) {
    miral_WindowInfo_height_inc1(self, height_inc)
  }
  #[inline]
  pub unsafe fn min_aspect(&self) -> miral_WindowInfo_AspectRatio {
    miral_WindowInfo_min_aspect(self)
  }
  #[inline]
  pub unsafe fn min_aspect1(&mut self, min_aspect: miral_WindowInfo_AspectRatio) {
    miral_WindowInfo_min_aspect1(self, min_aspect)
  }
  #[inline]
  pub unsafe fn max_aspect(&self) -> miral_WindowInfo_AspectRatio {
    miral_WindowInfo_max_aspect(self)
  }
  #[inline]
  pub unsafe fn max_aspect1(&mut self, max_aspect: miral_WindowInfo_AspectRatio) {
    miral_WindowInfo_max_aspect1(self, max_aspect)
  }
  #[inline]
  pub unsafe fn has_output_id(&self) -> bool {
    miral_WindowInfo_has_output_id(self)
  }
  #[inline]
  pub unsafe fn output_id(&self) -> ::std::os::raw::c_int {
    miral_WindowInfo_output_id(self)
  }
  #[inline]
  pub unsafe fn output_id1(&mut self, output_id: mir_optional_value<::std::os::raw::c_int>) {
    miral_WindowInfo_output_id1(self, output_id)
  }
  #[inline]
  pub unsafe fn preferred_orientation(&self) -> MirOrientationMode::Type {
    miral_WindowInfo_preferred_orientation(self)
  }
  #[inline]
  pub unsafe fn preferred_orientation1(&mut self, preferred_orientation: MirOrientationMode::Type) {
    miral_WindowInfo_preferred_orientation1(self, preferred_orientation)
  }
  #[inline]
  pub unsafe fn confine_pointer(&self) -> MirPointerConfinementState::Type {
    miral_WindowInfo_confine_pointer(self)
  }
  #[inline]
  pub unsafe fn confine_pointer1(&mut self, confinement: MirPointerConfinementState::Type) {
    miral_WindowInfo_confine_pointer1(self, confinement)
  }
  #[inline]
  pub unsafe fn shell_chrome(&self) -> MirShellChrome::Type {
    miral_WindowInfo_shell_chrome(self)
  }
  #[inline]
  pub unsafe fn shell_chrome1(&mut self, chrome: MirShellChrome::Type) {
    miral_WindowInfo_shell_chrome1(self, chrome)
  }
  #[inline]
  pub unsafe fn userdata(&self) -> std_shared_ptr {
    miral_WindowInfo_userdata(self)
  }
  #[inline]
  pub unsafe fn userdata1(&mut self, userdata: std_shared_ptr) {
    miral_WindowInfo_userdata1(self, userdata)
  }
  #[inline]
  pub unsafe fn depth_layer(&self) -> MirDepthLayer::Type {
    miral_WindowInfo_depth_layer(self)
  }
  #[inline]
  pub unsafe fn depth_layer1(&mut self, depth_layer: MirDepthLayer::Type) {
    miral_WindowInfo_depth_layer1(self, depth_layer)
  }
  #[inline]
  pub unsafe fn attached_edges(&self) -> MirPlacementGravity::Type {
    miral_WindowInfo_attached_edges(self)
  }
  #[inline]
  pub unsafe fn attached_edges1(&mut self, edges: MirPlacementGravity::Type) {
    miral_WindowInfo_attached_edges1(self, edges)
  }
  #[inline]
  pub unsafe fn exclusive_rect(&self) -> mir_optional_value<mir_geometry_Rectangle> {
    miral_WindowInfo_exclusive_rect(self)
  }
  #[inline]
  pub unsafe fn exclusive_rect1(
    &mut self,
    rect: *const mir_optional_value<mir_geometry_Rectangle>,
  ) {
    miral_WindowInfo_exclusive_rect1(self, rect)
  }
  #[inline]
  pub unsafe fn new() -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_WindowInfo_WindowInfo(&mut __bindgen_tmp);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn new1(
    window: *const miral_Window,
    params: *const miral_WindowSpecification,
  ) -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_WindowInfo_WindowInfo1(&mut __bindgen_tmp, window, params);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn new2(that: *const miral_WindowInfo) -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_WindowInfo_WindowInfo2(&mut __bindgen_tmp, that);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn destruct(&mut self) {
    miral_WindowInfo_WindowInfo_destructor(self)
  }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct miral_ApplicationInfo {
  _unused: [u8; 0],
}
#[doc = " Workspace is intentionally opaque in the miral API. Its only purpose is to"]
#[doc = " provide a shared_ptr which is used as an identifier."]
#[doc = ""]
#[doc = " The MirAL implementation of workspaces only prescribes the following:"]
#[doc = "  o When child windows are created they are added to all(any) workspaces of parent"]
#[doc = "  o Focus changes will first try windows with a common workspace"]
#[doc = "  o Adding/removing windows to a workspace affects the whole ancestor/decendent tree"]
#[doc = ""]
#[doc = " The presentation of workspaces is left entirely to the policy"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct miral_Workspace {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct miral_WindowManagerToolsImplementation {
  _unused: [u8; 0],
}
#[doc = " Window management functions for querying and updating MirAL's model"]
#[repr(C)]
#[derive(Debug)]
pub struct miral_WindowManagerTools {
  pub tools: *mut miral_WindowManagerToolsImplementation,
}
#[test]
fn bindgen_test_layout_miral_WindowManagerTools() {
  assert_eq!(
    ::std::mem::size_of::<miral_WindowManagerTools>(),
    8usize,
    concat!("Size of: ", stringify!(miral_WindowManagerTools))
  );
  assert_eq!(
    ::std::mem::align_of::<miral_WindowManagerTools>(),
    8usize,
    concat!("Alignment of ", stringify!(miral_WindowManagerTools))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<miral_WindowManagerTools>())).tools as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(miral_WindowManagerTools),
      "::",
      stringify!(tools)
    )
  );
}
extern "C" {
  #[doc = " count the applications"]
  #[doc = ""]
  #[doc = " @return number of applications"]
  #[link_name = "\u{1}_ZNK5miral18WindowManagerTools18count_applicationsEv"]
  pub fn miral_WindowManagerTools_count_applications(
    this: *const miral_WindowManagerTools,
  ) -> ::std::os::raw::c_uint;
}
extern "C" {
  #[doc = " execute functor for each application"]
  #[doc = ""]
  #[doc = " @param functor the functor"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools20for_each_applicationERKSt8functionIFvRNS_15ApplicationInfoEEE"]
  pub fn miral_WindowManagerTools_for_each_application(
    this: *mut miral_WindowManagerTools,
    functor: *const std_function,
  );
}
extern "C" {
  #[doc = " find an application meeting the predicate"]
  #[doc = ""]
  #[doc = " @param predicate the predicate"]
  #[doc = " @return          the application"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools16find_applicationERKSt8functionIFbRKNS_15ApplicationInfoEEE"]
  pub fn miral_WindowManagerTools_find_application(
    this: *mut miral_WindowManagerTools,
    predicate: *const std_function,
  ) -> miral_Application;
}
extern "C" {
  #[doc = " retrieve metadata for an application"]
  #[doc = ""]
  #[doc = " @param session   the application session"]
  #[doc = " @return          the metadata"]
  #[link_name = "\u{1}_ZNK5miral18WindowManagerTools8info_forERKSt8weak_ptrIN3mir5scene7SessionEE"]
  pub fn miral_WindowManagerTools_info_for(
    this: *const miral_WindowManagerTools,
    session: *const std_weak_ptr,
  ) -> *mut miral_ApplicationInfo;
}
extern "C" {
  #[doc = " retrieve metadata for a window"]
  #[doc = ""]
  #[doc = " @param surface   the window surface"]
  #[doc = " @return          the metadata"]
  #[link_name = "\u{1}_ZNK5miral18WindowManagerTools8info_forERKSt8weak_ptrIN3mir5scene7SurfaceEE"]
  pub fn miral_WindowManagerTools_info_for1(
    this: *const miral_WindowManagerTools,
    surface: *const std_weak_ptr,
  ) -> *mut miral_WindowInfo;
}
extern "C" {
  #[doc = " retrieve metadata for a window"]
  #[doc = ""]
  #[doc = " @param window    the window"]
  #[doc = " @return          the metadata"]
  #[link_name = "\u{1}_ZNK5miral18WindowManagerTools8info_forERKNS_6WindowE"]
  pub fn miral_WindowManagerTools_info_for2(
    this: *const miral_WindowManagerTools,
    window: *const miral_Window,
  ) -> *mut miral_WindowInfo;
}
extern "C" {
  #[doc = " retrieve metadata for a persistent surface id"]
  #[doc = ""]
  #[doc = " @param id        the persistent surface id"]
  #[doc = " @return          the metadata"]
  #[doc = " @throw           invalid_argument or runtime_error if the id is badly formatted/doesn't identify a current window"]
  #[link_name = "\u{1}_ZNK5miral18WindowManagerTools18info_for_window_idERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
  pub fn miral_WindowManagerTools_info_for_window_id(
    this: *const miral_WindowManagerTools,
    id: *const std_string,
  ) -> *mut miral_WindowInfo;
}
extern "C" {
  #[doc = " retrieve the persistent surface id for a window"]
  #[doc = ""]
  #[doc = " @param window    the window"]
  #[doc = " @return          the persistent surface id"]
  #[link_name = "\u{1}_ZNK5miral18WindowManagerTools13id_for_windowB5cxx11ERKNS_6WindowE"]
  pub fn miral_WindowManagerTools_id_for_window(
    this: *const miral_WindowManagerTools,
    window: *const miral_Window,
  ) -> std_string;
}
extern "C" {
  #[doc = " Send close request to the window"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools19ask_client_to_closeERKNS_6WindowE"]
  pub fn miral_WindowManagerTools_ask_client_to_close(
    this: *mut miral_WindowManagerTools,
    window: *const miral_Window,
  );
}
extern "C" {
  #[doc = " Close the window by force"]
  #[doc = " \\note ask_client_to_close() is the polite way"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools11force_closeERKNS_6WindowE"]
  pub fn miral_WindowManagerTools_force_close(
    this: *mut miral_WindowManagerTools,
    window: *const miral_Window,
  );
}
extern "C" {
  #[doc = " retrieve the active window"]
  #[link_name = "\u{1}_ZNK5miral18WindowManagerTools13active_windowEv"]
  pub fn miral_WindowManagerTools_active_window(
    this: *const miral_WindowManagerTools,
  ) -> miral_Window;
}
extern "C" {
  #[doc = " select a new active window based on the hint"]
  #[doc = ""]
  #[doc = " @param hint  the hint"]
  #[doc = " @return      the new active window"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools20select_active_windowERKNS_6WindowE"]
  pub fn miral_WindowManagerTools_select_active_window(
    this: *mut miral_WindowManagerTools,
    hint: *const miral_Window,
  ) -> miral_Window;
}
extern "C" {
  #[doc = " move the active window"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools18drag_active_windowEN3mir8geometry12DisplacementE"]
  pub fn miral_WindowManagerTools_drag_active_window(
    this: *mut miral_WindowManagerTools,
    movement: mir_geometry_Displacement,
  );
}
extern "C" {
  #[doc = " move the window"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools11drag_windowERKNS_6WindowEN3mir8geometry12DisplacementE"]
  pub fn miral_WindowManagerTools_drag_window(
    this: *mut miral_WindowManagerTools,
    window: *const miral_Window,
    movement: mir_geometry_Displacement,
  );
}
extern "C" {
  #[doc = " make the next application active"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools22focus_next_applicationEv"]
  pub fn miral_WindowManagerTools_focus_next_application(this: *mut miral_WindowManagerTools);
}
extern "C" {
  #[doc = " make the previous application active"]
  #[doc = " \\remark Since MirAL 2.5"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools22focus_prev_applicationEv"]
  pub fn miral_WindowManagerTools_focus_prev_application(this: *mut miral_WindowManagerTools);
}
extern "C" {
  #[doc = " make the next surface active within the active application"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools29focus_next_within_applicationEv"]
  pub fn miral_WindowManagerTools_focus_next_within_application(
    this: *mut miral_WindowManagerTools,
  );
}
extern "C" {
  #[doc = " make the prev surface active within the active application"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools29focus_prev_within_applicationEv"]
  pub fn miral_WindowManagerTools_focus_prev_within_application(
    this: *mut miral_WindowManagerTools,
  );
}
extern "C" {
  #[doc = " Find the topmost window at the cursor"]
  #[link_name = "\u{1}_ZNK5miral18WindowManagerTools9window_atEN3mir8geometry5PointE"]
  pub fn miral_WindowManagerTools_window_at(
    this: *const miral_WindowManagerTools,
    cursor: mir_geometry_Point,
  ) -> miral_Window;
}
extern "C" {
  #[doc = " Find the active output area"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools13active_outputEv"]
  pub fn miral_WindowManagerTools_active_output(
    this: *mut miral_WindowManagerTools,
  ) -> mir_geometry_Rectangle;
}
extern "C" {
  #[doc = " Raise window and all its children"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools10raise_treeERKNS_6WindowE"]
  pub fn miral_WindowManagerTools_raise_tree(
    this: *mut miral_WindowManagerTools,
    root: *const miral_Window,
  );
}
extern "C" {
  #[doc = " Start drag and drop. The handle will be passed to the client which can"]
  #[doc = " then use it to talk to the whatever service is being used to support drag"]
  #[doc = " and drop (e.g. on Ubuntu the content hub)."]
  #[doc = ""]
  #[doc = " @param window_info source window"]
  #[doc = " @param handle      drag handle"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools19start_drag_and_dropERNS_10WindowInfoERKSt6vectorIhSaIhEE"]
  pub fn miral_WindowManagerTools_start_drag_and_drop(
    this: *mut miral_WindowManagerTools,
    window_info: *mut miral_WindowInfo,
    handle: *const std_vector,
  );
}
extern "C" {
  #[doc = " End drag and drop"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools17end_drag_and_dropEv"]
  pub fn miral_WindowManagerTools_end_drag_and_drop(this: *mut miral_WindowManagerTools);
}
extern "C" {
  #[doc = " Apply modifications to a window"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools13modify_windowERNS_10WindowInfoERKNS_19WindowSpecificationE"]
  pub fn miral_WindowManagerTools_modify_window(
    this: *mut miral_WindowManagerTools,
    window_info: *mut miral_WindowInfo,
    modifications: *const miral_WindowSpecification,
  );
}
extern "C" {
  #[doc = " Apply modifications to a window"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools13modify_windowERKNS_6WindowERKNS_19WindowSpecificationE"]
  pub fn miral_WindowManagerTools_modify_window1(
    this: *mut miral_WindowManagerTools,
    window: *const miral_Window,
    modifications: *const miral_WindowSpecification,
  );
}
extern "C" {
  #[doc = " Set a default size and position to reflect state change"]
  #[link_name = "\u{1}_ZNK5miral18WindowManagerTools24place_and_size_for_stateERNS_19WindowSpecificationERKNS_10WindowInfoE"]
  pub fn miral_WindowManagerTools_place_and_size_for_state(
    this: *const miral_WindowManagerTools,
    modifications: *mut miral_WindowSpecification,
    window_info: *const miral_WindowInfo,
  );
}
extern "C" {
  #[doc = " Create a workspace."]
  #[doc = " \\remark the tools hold only a weak_ptr<> to the workspace - there is no need for an explicit \"destroy\"."]
  #[doc = " @return a shared_ptr owning the workspace"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools16create_workspaceEv"]
  pub fn miral_WindowManagerTools_create_workspace(
    this: *mut miral_WindowManagerTools,
  ) -> std_shared_ptr;
}
extern "C" {
  #[doc = " Add the tree containing window to a workspace"]
  #[doc = " @param window    the window"]
  #[doc = " @param workspace the workspace;"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools21add_tree_to_workspaceERKNS_6WindowERKSt10shared_ptrINS_9WorkspaceEE"]
  pub fn miral_WindowManagerTools_add_tree_to_workspace(
    this: *mut miral_WindowManagerTools,
    window: *const miral_Window,
    workspace: *const std_shared_ptr,
  );
}
extern "C" {
  #[doc = " Remove the tree containing window from a workspace"]
  #[doc = " @param window    the window"]
  #[doc = " @param workspace the workspace;"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools26remove_tree_from_workspaceERKNS_6WindowERKSt10shared_ptrINS_9WorkspaceEE"]
  pub fn miral_WindowManagerTools_remove_tree_from_workspace(
    this: *mut miral_WindowManagerTools,
    window: *const miral_Window,
    workspace: *const std_shared_ptr,
  );
}
extern "C" {
  #[doc = " Moves all the content from one workspace to another"]
  #[doc = " @param from_workspace the workspace to move the windows from;"]
  #[doc = " @param to_workspace the workspace to move the windows to;"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools35move_workspace_content_to_workspaceERKSt10shared_ptrINS_9WorkspaceEES5_"]
  pub fn miral_WindowManagerTools_move_workspace_content_to_workspace(
    this: *mut miral_WindowManagerTools,
    to_workspace: *const std_shared_ptr,
    from_workspace: *const std_shared_ptr,
  );
}
extern "C" {
  #[doc = " invoke callback with each workspace containing window"]
  #[doc = " \\warning it is unsafe to add or remove windows from workspaces from the callback during enumeration"]
  #[doc = " @param window"]
  #[doc = " @param callback"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools29for_each_workspace_containingERKNS_6WindowERKSt8functionIFvRKSt10shared_ptrINS_9WorkspaceEEEE"]
  pub fn miral_WindowManagerTools_for_each_workspace_containing(
    this: *mut miral_WindowManagerTools,
    window: *const miral_Window,
    callback: *const std_function,
  );
}
extern "C" {
  #[doc = " invoke callback with each window contained in workspace"]
  #[doc = " \\warning it is unsafe to add or remove windows from workspaces from the callback during enumeration"]
  #[doc = " @param workspace"]
  #[doc = " @param callback"]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools28for_each_window_in_workspaceERKSt10shared_ptrINS_9WorkspaceEERKSt8functionIFvRKNS_6WindowEEE"]
  pub fn miral_WindowManagerTools_for_each_window_in_workspace(
    this: *mut miral_WindowManagerTools,
    workspace: *const std_shared_ptr,
    callback: *const std_function,
  );
}
extern "C" {
  #[doc = " Multi-thread support"]
  #[doc = "  Allows threads that don't hold a lock on the model to acquire one and call the \"Update Model\""]
  #[doc = "  member functions."]
  #[doc = "  This should NOT be used by a thread that has called the WindowManagementPolicy methods (and"]
  #[doc = "  already holds the lock)."]
  #[link_name = "\u{1}_ZN5miral18WindowManagerTools17invoke_under_lockERKSt8functionIFvvEE"]
  pub fn miral_WindowManagerTools_invoke_under_lock(
    this: *mut miral_WindowManagerTools,
    callback: *const std_function,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral18WindowManagerToolsC1EPNS_32WindowManagerToolsImplementationE"]
  pub fn miral_WindowManagerTools_WindowManagerTools(
    this: *mut miral_WindowManagerTools,
    tools: *mut miral_WindowManagerToolsImplementation,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral18WindowManagerToolsC1ERKS0_"]
  pub fn miral_WindowManagerTools_WindowManagerTools1(
    this: *mut miral_WindowManagerTools,
    arg1: *const miral_WindowManagerTools,
  );
}
extern "C" {
  #[link_name = "\u{1}_ZN5miral18WindowManagerToolsD1Ev"]
  pub fn miral_WindowManagerTools_WindowManagerTools_destructor(
    this: *mut miral_WindowManagerTools,
  );
}
impl miral_WindowManagerTools {
  #[inline]
  pub unsafe fn count_applications(&self) -> ::std::os::raw::c_uint {
    miral_WindowManagerTools_count_applications(self)
  }
  #[inline]
  pub unsafe fn for_each_application(&mut self, functor: *const std_function) {
    miral_WindowManagerTools_for_each_application(self, functor)
  }
  #[inline]
  pub unsafe fn find_application(&mut self, predicate: *const std_function) -> miral_Application {
    miral_WindowManagerTools_find_application(self, predicate)
  }
  #[inline]
  pub unsafe fn info_for(&self, session: *const std_weak_ptr) -> *mut miral_ApplicationInfo {
    miral_WindowManagerTools_info_for(self, session)
  }
  #[inline]
  pub unsafe fn info_for1(&self, surface: *const std_weak_ptr) -> *mut miral_WindowInfo {
    miral_WindowManagerTools_info_for1(self, surface)
  }
  #[inline]
  pub unsafe fn info_for2(&self, window: *const miral_Window) -> *mut miral_WindowInfo {
    miral_WindowManagerTools_info_for2(self, window)
  }
  #[inline]
  pub unsafe fn info_for_window_id(&self, id: *const std_string) -> *mut miral_WindowInfo {
    miral_WindowManagerTools_info_for_window_id(self, id)
  }
  #[inline]
  pub unsafe fn id_for_window(&self, window: *const miral_Window) -> std_string {
    miral_WindowManagerTools_id_for_window(self, window)
  }
  #[inline]
  pub unsafe fn ask_client_to_close(&mut self, window: *const miral_Window) {
    miral_WindowManagerTools_ask_client_to_close(self, window)
  }
  #[inline]
  pub unsafe fn force_close(&mut self, window: *const miral_Window) {
    miral_WindowManagerTools_force_close(self, window)
  }
  #[inline]
  pub unsafe fn active_window(&self) -> miral_Window {
    miral_WindowManagerTools_active_window(self)
  }
  #[inline]
  pub unsafe fn select_active_window(&mut self, hint: *const miral_Window) -> miral_Window {
    miral_WindowManagerTools_select_active_window(self, hint)
  }
  #[inline]
  pub unsafe fn drag_active_window(&mut self, movement: mir_geometry_Displacement) {
    miral_WindowManagerTools_drag_active_window(self, movement)
  }
  #[inline]
  pub unsafe fn drag_window(
    &mut self,
    window: *const miral_Window,
    movement: mir_geometry_Displacement,
  ) {
    miral_WindowManagerTools_drag_window(self, window, movement)
  }
  #[inline]
  pub unsafe fn focus_next_application(&mut self) {
    miral_WindowManagerTools_focus_next_application(self)
  }
  #[inline]
  pub unsafe fn focus_prev_application(&mut self) {
    miral_WindowManagerTools_focus_prev_application(self)
  }
  #[inline]
  pub unsafe fn focus_next_within_application(&mut self) {
    miral_WindowManagerTools_focus_next_within_application(self)
  }
  #[inline]
  pub unsafe fn focus_prev_within_application(&mut self) {
    miral_WindowManagerTools_focus_prev_within_application(self)
  }
  #[inline]
  pub unsafe fn window_at(&self, cursor: mir_geometry_Point) -> miral_Window {
    miral_WindowManagerTools_window_at(self, cursor)
  }
  #[inline]
  pub unsafe fn active_output(&mut self) -> mir_geometry_Rectangle {
    miral_WindowManagerTools_active_output(self)
  }
  #[inline]
  pub unsafe fn raise_tree(&mut self, root: *const miral_Window) {
    miral_WindowManagerTools_raise_tree(self, root)
  }
  #[inline]
  pub unsafe fn start_drag_and_drop(
    &mut self,
    window_info: *mut miral_WindowInfo,
    handle: *const std_vector,
  ) {
    miral_WindowManagerTools_start_drag_and_drop(self, window_info, handle)
  }
  #[inline]
  pub unsafe fn end_drag_and_drop(&mut self) {
    miral_WindowManagerTools_end_drag_and_drop(self)
  }
  #[inline]
  pub unsafe fn modify_window(
    &mut self,
    window_info: *mut miral_WindowInfo,
    modifications: *const miral_WindowSpecification,
  ) {
    miral_WindowManagerTools_modify_window(self, window_info, modifications)
  }
  #[inline]
  pub unsafe fn modify_window1(
    &mut self,
    window: *const miral_Window,
    modifications: *const miral_WindowSpecification,
  ) {
    miral_WindowManagerTools_modify_window1(self, window, modifications)
  }
  #[inline]
  pub unsafe fn place_and_size_for_state(
    &self,
    modifications: *mut miral_WindowSpecification,
    window_info: *const miral_WindowInfo,
  ) {
    miral_WindowManagerTools_place_and_size_for_state(self, modifications, window_info)
  }
  #[inline]
  pub unsafe fn create_workspace(&mut self) -> std_shared_ptr {
    miral_WindowManagerTools_create_workspace(self)
  }
  #[inline]
  pub unsafe fn add_tree_to_workspace(
    &mut self,
    window: *const miral_Window,
    workspace: *const std_shared_ptr,
  ) {
    miral_WindowManagerTools_add_tree_to_workspace(self, window, workspace)
  }
  #[inline]
  pub unsafe fn remove_tree_from_workspace(
    &mut self,
    window: *const miral_Window,
    workspace: *const std_shared_ptr,
  ) {
    miral_WindowManagerTools_remove_tree_from_workspace(self, window, workspace)
  }
  #[inline]
  pub unsafe fn move_workspace_content_to_workspace(
    &mut self,
    to_workspace: *const std_shared_ptr,
    from_workspace: *const std_shared_ptr,
  ) {
    miral_WindowManagerTools_move_workspace_content_to_workspace(self, to_workspace, from_workspace)
  }
  #[inline]
  pub unsafe fn for_each_workspace_containing(
    &mut self,
    window: *const miral_Window,
    callback: *const std_function,
  ) {
    miral_WindowManagerTools_for_each_workspace_containing(self, window, callback)
  }
  #[inline]
  pub unsafe fn for_each_window_in_workspace(
    &mut self,
    workspace: *const std_shared_ptr,
    callback: *const std_function,
  ) {
    miral_WindowManagerTools_for_each_window_in_workspace(self, workspace, callback)
  }
  #[inline]
  pub unsafe fn invoke_under_lock(&mut self, callback: *const std_function) {
    miral_WindowManagerTools_invoke_under_lock(self, callback)
  }
  #[inline]
  pub unsafe fn new(tools: *mut miral_WindowManagerToolsImplementation) -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_WindowManagerTools_WindowManagerTools(&mut __bindgen_tmp, tools);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn new1(arg1: *const miral_WindowManagerTools) -> Self {
    let mut __bindgen_tmp = ::std::mem::uninitialized();
    miral_WindowManagerTools_WindowManagerTools1(&mut __bindgen_tmp, arg1);
    __bindgen_tmp
  }
  #[inline]
  pub unsafe fn destruct(&mut self) {
    miral_WindowManagerTools_WindowManagerTools_destructor(self)
  }
}
pub mod MirInputEventModifier {
  #[doc = " Description of key modifier state."]
  pub type Type = u32;
  pub const mir_input_event_modifier_none: Type = 1;
  pub const mir_input_event_modifier_alt: Type = 2;
  pub const mir_input_event_modifier_alt_left: Type = 4;
  pub const mir_input_event_modifier_alt_right: Type = 8;
  pub const mir_input_event_modifier_shift: Type = 16;
  pub const mir_input_event_modifier_shift_left: Type = 32;
  pub const mir_input_event_modifier_shift_right: Type = 64;
  pub const mir_input_event_modifier_sym: Type = 128;
  pub const mir_input_event_modifier_function: Type = 256;
  pub const mir_input_event_modifier_ctrl: Type = 512;
  pub const mir_input_event_modifier_ctrl_left: Type = 1024;
  pub const mir_input_event_modifier_ctrl_right: Type = 2048;
  pub const mir_input_event_modifier_meta: Type = 4096;
  pub const mir_input_event_modifier_meta_left: Type = 8192;
  pub const mir_input_event_modifier_meta_right: Type = 16384;
  pub const mir_input_event_modifier_caps_lock: Type = 32768;
  pub const mir_input_event_modifier_num_lock: Type = 65536;
  pub const mir_input_event_modifier_scroll_lock: Type = 131072;
}
pub type MirInputEventModifiers = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MirKeyboardEvent {
  _unused: [u8; 0],
}
pub mod MirKeyboardAction {
  #[doc = " Possible actions for changing key state"]
  pub type Type = u32;
  pub const mir_keyboard_action_up: Type = 0;
  pub const mir_keyboard_action_down: Type = 1;
  pub const mir_keyboard_action_repeat: Type = 2;
  pub const mir_keyboard_actions: Type = 3;
}
extern "C" {
  #[doc = " Retrieve the action which triggered a given key event."]
  #[doc = ""]
  #[doc = "  \\param [in] event The key event"]
  #[doc = "  \\return           The associated action"]
  pub fn mir_keyboard_event_action(event: *const MirKeyboardEvent) -> MirKeyboardAction::Type;
}
extern "C" {
  #[doc = " Retrieve the raw hardware scan code associated with the key acted on. May"]
  #[doc = " be interpreted as per <linux/input.h>"]
  #[doc = ""]
  #[doc = "   \\param [in] event The key event"]
  #[doc = "   \\return           The scancode"]
  pub fn mir_keyboard_event_scan_code(event: *const MirKeyboardEvent) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = " Retrieve the modifier keys pressed when the key action occured."]
  #[doc = ""]
  #[doc = "   \\param [in] event The key event"]
  #[doc = "   \\return           The modifier mask"]
  pub fn mir_keyboard_event_modifiers(event: *const MirKeyboardEvent) -> MirInputEventModifiers;
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>(),
    32usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_basic_string<::std::os::raw::c_char>)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_basic_string<::std::os::raw::c_char>)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation() {
  assert_eq!(
    ::std::mem::size_of::<std_char_traits>(),
    1usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_char_traits)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_char_traits>(),
    1usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_char_traits)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation() {
  assert_eq!(
    ::std::mem::size_of::<std_allocator>(),
    1usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_allocator)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_allocator>(),
    1usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_allocator)
    )
  );
}
#[test]
fn __bindgen_test_layout_mir_geometry_detail_IntWrapper_open0_mir_geometry_WidthTag_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Size of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
}
#[test]
fn __bindgen_test_layout_mir_geometry_detail_IntWrapper_open0_mir_geometry_HeightTag_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Size of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
}
#[test]
fn __bindgen_test_layout_mir_geometry_detail_IntWrapper_open0_mir_geometry_XTag_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Size of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
}
#[test]
fn __bindgen_test_layout_mir_geometry_detail_IntWrapper_open0_mir_geometry_YTag_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Size of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
}
#[test]
fn __bindgen_test_layout_mir_geometry_detail_IntWrapper_open0_mir_geometry_DeltaXTag_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Size of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
}
#[test]
fn __bindgen_test_layout_mir_geometry_detail_IntWrapper_open0_mir_geometry_DeltaYTag_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Size of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<mir_geometry_detail_IntWrapper>(),
    4usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(mir_geometry_detail_IntWrapper)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_weak_ptr_open0_mir_scene_Surface_close0_instantiation() {
  assert_eq!(
    ::std::mem::size_of::<std_weak_ptr>(),
    16usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_weak_ptr)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_weak_ptr>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_weak_ptr)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_mir_geometry_Rectangle_std_allocator_open1_mir_geometry_Rectangle_close1_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<std_vector>(),
    24usize,
    concat!("Size of template specialization: ", stringify!(std_vector))
  );
  assert_eq!(
    ::std::mem::align_of::<std_vector>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_vector)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_mir_geometry_Rectangle_close0_instantiation() {
  assert_eq!(
    ::std::mem::size_of::<std_allocator>(),
    1usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_allocator)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_allocator>(),
    1usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_allocator)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_weak_ptr_open0_mir_scene_Surface_close0_instantiation_1() {
  assert_eq!(
    ::std::mem::size_of::<std_weak_ptr>(),
    16usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_weak_ptr)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_weak_ptr>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_weak_ptr)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_mir_geometry_Rectangle_std_allocator_open1_mir_geometry_Rectangle_close1_close0_instantiation_1(
) {
  assert_eq!(
    ::std::mem::size_of::<std_vector>(),
    24usize,
    concat!("Size of template specialization: ", stringify!(std_vector))
  );
  assert_eq!(
    ::std::mem::align_of::<std_vector>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_vector)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_mir_geometry_Rectangle_close0_instantiation_1() {
  assert_eq!(
    ::std::mem::size_of::<std_allocator>(),
    1usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_allocator)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_allocator>(),
    1usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_allocator)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_miral_WindowSpecification_Self_std_default_delete_open1_miral_WindowSpecification_Self_close1_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<std_unique_ptr>(),
    8usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_unique_ptr)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_unique_ptr>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_unique_ptr)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_miral_WindowSpecification_Self_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<std_default_delete>(),
    1usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_default_delete)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_default_delete>(),
    1usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_default_delete)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_shared_ptr_open0_mir_scene_Surface_close0_instantiation() {
  assert_eq!(
    ::std::mem::size_of::<std_shared_ptr>(),
    16usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_shared_ptr)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_shared_ptr>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_shared_ptr)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_shared_ptr_open0_miral_Window_Self_close0_instantiation() {
  assert_eq!(
    ::std::mem::size_of::<std_shared_ptr>(),
    16usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_shared_ptr)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_shared_ptr>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_shared_ptr)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_miral_WindowInfo_Self_std_default_delete_open1_miral_WindowInfo_Self_close1_close0_instantiation(
) {
  assert_eq!(
    ::std::mem::size_of::<std_unique_ptr>(),
    8usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_unique_ptr)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_unique_ptr>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_unique_ptr)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_miral_WindowInfo_Self_close0_instantiation() {
  assert_eq!(
    ::std::mem::size_of::<std_default_delete>(),
    1usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_default_delete)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_default_delete>(),
    1usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_default_delete)
    )
  );
}
#[test]
fn __bindgen_test_layout_std_weak_ptr_open0_mir_scene_Surface_close0_instantiation_2() {
  assert_eq!(
    ::std::mem::size_of::<std_weak_ptr>(),
    16usize,
    concat!(
      "Size of template specialization: ",
      stringify!(std_weak_ptr)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<std_weak_ptr>(),
    8usize,
    concat!(
      "Alignment of template specialization: ",
      stringify!(std_weak_ptr)
    )
  );
}
